<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Decorator | (learn&think)]]></title>
  <link href="http://shishougang.github.com/tags/decorator/atom.xml" rel="self"/>
  <link href="http://shishougang.github.com/"/>
  <updated>2014-05-11T16:37:24+08:00</updated>
  <id>http://shishougang.github.com/</id>
  <author>
    <name><![CDATA[DreamRunner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[浅谈设计模式三: 装饰器模式(Decorator)]]></title>
    <link href="http://shishougang.github.com/blog/2014/05/03/%E6%B5%85%E8%B0%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F3/"/>
    <updated>2014-05-03T00:00:00+08:00</updated>
    <id>http://shishougang.github.com/blog/2014/05/03/浅谈设计模式3</id>
    <content type="html"><![CDATA[<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 实例</h2>
<div class="outline-text-2" id="text-1">
<p>
星巴克以咖啡文明，现在为它设计它的咖啡订餐系统。
</p>
<ol class="org-ol">
<li>先定义一类饮料的基类 <code>Beverage</code> ，为不同咖啡做好一个接口。
</li>
<li>每种不同的咖啡继承这个基类，覆盖各自的特性，比如描述，价格等。
</li>
</ol>

<p>
每种咖啡都有很多中附加，比如拿铁咖啡就有，加糖拿铁，加奶拿铁，加奶加糖拿铁等等。所以按照上面的设计来设计咖啡订餐系统，那么整个系统类结构如下：
</p>

<img src="/images/blog/2014/decorator/beverage_structure.jpeg">

<p class="info">
每种咖啡不同的附加组合导致太多类。
</p>

<!-- more -->
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 装饰器模式(Decorator)</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1"><span class="section-number-3">2.1</span> 目的</h3>
<div class="outline-text-3" id="text-2-1">
<p>
为一个对象动态的附加额外的职责。装饰器（Decorators)提供除了用子类的另外一种灵活的扩充功能方法。
</p>
</div>
</div>
<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2"><span class="section-number-3">2.2</span> 实现</h3>
<div class="outline-text-3" id="text-2-2">
<p>
<a href="https://github.com/shishougang/DesignPattern-CPP/tree/master/src/decorator">代码实例在这里</a>。
</p>
</div>
<div id="outline-container-sec-2-2-1" class="outline-4">
<h4 id="sec-2-2-1"><span class="section-number-4">2.2.1</span> 定义组件抽象接口和具体组件</h4>
<div class="outline-text-4" id="text-2-2-1">
<p>
1.定义组件抽象接口：咖啡和装饰器的基类
</p>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00ffff;">class</span> <span style="color: #98fb98;">Beverage</span> {
 <span style="color: #00ffff;">public</span>:
  <span style="color: #87cefa;">Beverage</span>();
  <span style="color: #00ffff;">virtual</span> ~<span style="color: #87cefa;">Beverage</span>();
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">string</span> <span style="color: #87cefa;">description</span>();
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">double</span> <span style="color: #87cefa;">cost</span>() = 0;
 <span style="color: #00ffff;">protected</span>:
  <span style="color: #98fb98;">string</span> <span style="color: #eedd82;">description_</span>;
};
</pre>
</div>

<p>
2.定义不同的组件：不同类型的咖啡
</p>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00ffff;">class</span> <span style="color: #98fb98;">DarkRoast</span> : <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">Beverage</span> {
 <span style="color: #00ffff;">public</span>:
  <span style="color: #87cefa;">DarkRoast</span>();
  <span style="color: #00ffff;">virtual</span> ~<span style="color: #87cefa;">DarkRoast</span>();
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">double</span> <span style="color: #87cefa;">cost</span>();
};
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-2-2-2" class="outline-4">
<h4 id="sec-2-2-2"><span class="section-number-4">2.2.2</span> 定义抽象装饰器和具体装饰器</h4>
<div class="outline-text-4" id="text-2-2-2">
<p class="info">
装饰器和被装饰的对象必须拥有相同的基类。
</p>
<p>
1.定义装饰器抽象接口（继承于组件抽象接口）：装饰器的基类
</p>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00ffff;">class</span> <span style="color: #98fb98;">CondimentDecorator</span> : <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">Beverage</span> {
 <span style="color: #00ffff;">public</span>:
  <span style="color: #00ffff;">virtual</span> ~<span style="color: #87cefa;">CondimentDecorator</span>() {}
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">string</span> <span style="color: #87cefa;">description</span>() = 0;
};
</pre>
</div>
<p>
2.定义不同的装饰器：不同咖啡的配料维持组件对象的一个引用，并定义与组件接口一致的接口。
</p>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00ffff;">class</span> <span style="color: #98fb98;">Milk</span> : <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">CondimentDecorator</span> {
 <span style="color: #00ffff;">public</span>:
  <span style="color: #00ffff;">explicit</span> <span style="color: #87cefa;">Milk</span>(<span style="color: #98fb98;">Beverage</span> *<span style="color: #eedd82;">beverage</span>);
  <span style="color: #00ffff;">virtual</span> ~<span style="color: #87cefa;">Milk</span>();
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">string</span> <span style="color: #87cefa;">description</span>();
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">double</span> <span style="color: #87cefa;">cost</span>();
 <span style="color: #00ffff;">private</span>:
  <span style="color: #98fb98;">Beverage</span> *<span style="color: #eedd82;">beverage_</span>;
};
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2-2-3" class="outline-4">
<h4 id="sec-2-2-3"><span class="section-number-4">2.2.3</span> 整合到一起</h4>
<div class="outline-text-4" id="text-2-2-3">
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #98fb98;">Beverage</span> *<span style="color: #eedd82;">beverage2</span> = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">DarkRoast</span>();
beverage2 = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">Mocha</span>(beverage2);
beverage2 = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">Mocha</span>(beverage2);
beverage2 = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">Whip</span>(beverage2);
cout &lt;&lt; beverage2-&gt;description() &lt;&lt; <span style="color: #ffa07a;">" $"</span> &lt;&lt; beverage2-&gt;cost() &lt;&lt; endl;
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2-2-4" class="outline-4">
<h4 id="sec-2-2-4"><span class="section-number-4">2.2.4</span> 总的框架</h4>
<div class="outline-text-4" id="text-2-2-4">
<img src="/images/blog/2014/decorator/beverage.jpeg">
</div>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 总结</h2>
<div class="outline-text-2" id="text-3">
</div><div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> 装饰器模式(Decorator)结构</h3>
<div class="outline-text-3" id="text-3-1">
<img src="/images/blog/2014/decorator/decorator_structure.jpg">
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> 组成</h3>
<div class="outline-text-3" id="text-3-2">
<ul class="org-ul">
<li>抽象组件（Component）定义一个对象接口，使得装饰对象能动态加入到组件中。
</li>
<li>具体组件（ConcreteComponent）定义一个能附加职责的类。
</li>
<li>抽象装饰器（Decorator）维持组件对象的一个引用，并定义与组件接口一致的接口。
</li>
<li>具体装饰器（ConcreteDecorator）添加职责给组件。
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3"><span class="section-number-3">3.3</span> 应用场景</h3>
<div class="outline-text-3" id="text-3-3">
<ul class="org-ul">
<li>为独立的对象动态并透明的添加职责，也就是，不影响其他对象。
</li>
<li>处理能收回的职责。
</li>
<li>当不能通过子类来扩充时。有时候一大堆独立的扩充是可能的，但将激增子类来支持每种扩充间的组合。或者一个类的定义可能被隐藏或不能用于生成子类。
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-3-4" class="outline-3">
<h3 id="sec-3-4"><span class="section-number-3">3.4</span> 缺点</h3>
<div class="outline-text-3" id="text-3-4">
<ol class="org-ol">
<li>装饰器和它的组件不是一样的。一个装饰器扮演着透明的附加。但是从对象标识的角度来看，一个被装饰的组件和组件本身并不一致。所以当你使用装饰器时，不应该依赖对象标识。
</li>
<li>许多小的对象。一个使用装饰器的设计经常导致系统被许多类似的小的对象所组成。这些小的对象仅仅不同在它们内在的关联，不是它们的类或参数的值。虽然这些系统很容易被熟知他们的人定置，但它们很难被了解和调试。
</li>
</ol>
</div>
</div>
</div>
]]></content>
  </entry>
  
</feed>
