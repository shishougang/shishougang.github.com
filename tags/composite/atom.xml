<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Composite | (learn&think)]]></title>
  <link href="http://dreamrunner.org/tags/composite/atom.xml" rel="self"/>
  <link href="http://dreamrunner.org/"/>
  <updated>2014-06-22T20:29:37+08:00</updated>
  <id>http://dreamrunner.org/</id>
  <author>
    <name><![CDATA[DreamRunner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[浅谈设计模式十二: 组合模式(Composite)]]></title>
    <link href="http://dreamrunner.org/blog/2014/05/04/%E6%B5%85%E8%B0%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F12/"/>
    <updated>2014-05-04T00:00:00+08:00</updated>
    <id>http://dreamrunner.org/blog/2014/05/04/浅谈设计模式12</id>
    <content type="html"><![CDATA[<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 实例</h2>
<div class="outline-text-2" id="text-1">
<p>
上节使用迭代器模式可以很方便访问各个菜单目录下的菜单，易易于菜单目录的扩展。但现在菜单目录下新增加了子菜单，比如 <code>DinerMenu</code> 下有
<code>DessertMenu</code> 的子菜单，那么如何更进一步改进我们的设计，新设计至少需要：
</p>

<ul class="org-ul">
<li>一种树状结构来包含菜单目录，子目录和菜单项。
</li>
<li>遍历菜单目录里的每个菜单项如何迭代器一样方便。
</li>
<li>遍历菜单更灵活。比如，只遍历Diner的desssert菜单，或遍历整个Diner菜单，包括dessert菜单。
</li>
</ul>

<!-- more -->
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 组合模式(Composite)</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1"><span class="section-number-3">2.1</span> 目的</h3>
<div class="outline-text-3" id="text-2-1">
<p>
把对象组合成树状结构来表示部分-整体的层次结构。组合模式让用户能一致的对待单个对象和组合对象。
</p>
</div>
</div>

<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2"><span class="section-number-3">2.2</span> 实现</h3>
<div class="outline-text-3" id="text-2-2">
<p>
组合模式能以树状的形式建立对象的结构，并同时包换对象的组合和单个对象作为树的节点。使用一个组合的结构，能对组合和单个对象使用同样的操作。也就是说，大多数情况下，我们能忽略对象组合和单个对象的区别。<a href="https://github.com/shishougang/DesignPattern-CPP/tree/master/src/composite">代码实例在这里</a>
。基本的组合树状结构如下：
</p>
<img src="/images/blog/2014/composite/composite_tree.jpeg">

<p>
按照下面组合模式的结构图具体实现。
</p>
</div>
<div id="outline-container-sec-2-2-1" class="outline-4">
<h4 id="sec-2-2-1"><span class="section-number-4">2.2.1</span> 定义构件接口</h4>
<div class="outline-text-4" id="text-2-2-1">
<p>
定义 <code>MenuComponent</code> 构件类，为页节点（ <code>MenuItem</code> ）和组合节点（ <code>Menu</code> ）声明接口，并为它们实现默认的操作。
</p>

<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00ffff;">class</span> <span style="color: #98fb98;">MenuComponent</span> {
 <span style="color: #00ffff;">public</span>:
  <span style="color: #00ffff;">virtual</span> ~<span style="color: #87cefa;">MenuComponent</span>() { }
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">add</span>(<span style="color: #98fb98;">MenuComponent</span> *<span style="color: #eedd82;">menu_component</span>) {
    <span style="color: #00ffff;">throw</span> runtime_error(<span style="color: #ffa07a;">"Unsupported Operation!"</span>);
  }
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">remove</span>(<span style="color: #98fb98;">MenuComponent</span> *<span style="color: #eedd82;">menu_component</span>) {
    <span style="color: #00ffff;">throw</span> runtime_error(<span style="color: #ffa07a;">"Unsupported Operation!"</span>);
  }
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">MenuComponent</span>* <span style="color: #87cefa;">getChid</span>(<span style="color: #98fb98;">int</span> <span style="color: #eedd82;">i</span>) <span style="color: #00ffff;">const</span> {
    <span style="color: #00ffff;">throw</span> runtime_error(<span style="color: #ffa07a;">"Unsupported Operation!"</span>);
  }
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">string</span> <span style="color: #87cefa;">name</span>() <span style="color: #00ffff;">const</span> {
    <span style="color: #00ffff;">throw</span> runtime_error(<span style="color: #ffa07a;">"Unsupported Operation!"</span>);
  }
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">string</span> <span style="color: #87cefa;">description</span>() <span style="color: #00ffff;">const</span> {
    <span style="color: #00ffff;">throw</span> runtime_error(<span style="color: #ffa07a;">"Unsupported Operation!"</span>);
  }
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">double</span> <span style="color: #87cefa;">price</span>() <span style="color: #00ffff;">const</span> {
    <span style="color: #00ffff;">throw</span> runtime_error(<span style="color: #ffa07a;">"Unsupported Operation!"</span>);
  }
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">bool</span> <span style="color: #87cefa;">isVegetarian</span>() <span style="color: #00ffff;">const</span> {
    <span style="color: #00ffff;">throw</span> runtime_error(<span style="color: #ffa07a;">"Unsupported Operation!"</span>);
  }
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">Iterator</span>* <span style="color: #87cefa;">createIterator</span>() = 0;
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">print</span>() <span style="color: #00ffff;">const</span> {
    <span style="color: #00ffff;">throw</span> runtime_error(<span style="color: #ffa07a;">"Unsupported Operation!"</span>);
  }
};
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2-2-2" class="outline-4">
<h4 id="sec-2-2-2"><span class="section-number-4">2.2.2</span> 实现 <code>MenuItem</code> （页节点）</h4>
<div class="outline-text-4" id="text-2-2-2">
<ul class="org-ul">
<li>菜单项直接打印自己的菜单项;
</li>
<li>菜单项只有本身，不用遍历，返回空的迭代器实例。
</li>
</ul>

<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00ffff;">class</span> <span style="color: #98fb98;">MenuItem</span> : <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">MenuComponent</span> {
 <span style="color: #00ffff;">public</span>:
  <span style="color: #87cefa;">MenuItem</span>(<span style="color: #00ffff;">const</span> <span style="color: #98fb98;">string</span> &amp;<span style="color: #eedd82;">name</span>, <span style="color: #00ffff;">const</span> <span style="color: #98fb98;">string</span> &amp;<span style="color: #eedd82;">description</span>, <span style="color: #98fb98;">bool</span> <span style="color: #eedd82;">vegetarian</span>,
           <span style="color: #98fb98;">double</span> <span style="color: #eedd82;">price</span>);
  <span style="color: #00ffff;">virtual</span> ~<span style="color: #87cefa;">MenuItem</span>();
  <span style="color: #98fb98;">string</span> <span style="color: #87cefa;">name</span>() <span style="color: #00ffff;">const</span> {
    <span style="color: #00ffff;">return</span> name_;
  }
  <span style="color: #98fb98;">string</span> <span style="color: #87cefa;">description</span>() <span style="color: #00ffff;">const</span> {
    <span style="color: #00ffff;">return</span> description_;
  }
  <span style="color: #98fb98;">double</span> <span style="color: #87cefa;">price</span>() <span style="color: #00ffff;">const</span> {
    <span style="color: #00ffff;">return</span> price_;
  }
  <span style="color: #98fb98;">bool</span> <span style="color: #87cefa;">isVegetarian</span>() <span style="color: #00ffff;">const</span> {
    <span style="color: #00ffff;">return</span> vegetarian_;
  }
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">print</span>() <span style="color: #00ffff;">const</span>;
  Iterator* createIterator();
 <span style="color: #00ffff;">private</span>:
  <span style="color: #98fb98;">string</span> <span style="color: #eedd82;">name_</span>;
  <span style="color: #98fb98;">string</span> <span style="color: #eedd82;">description_</span>;
  <span style="color: #98fb98;">bool</span> <span style="color: #eedd82;">vegetarian_</span>;
  <span style="color: #98fb98;">double</span> <span style="color: #eedd82;">price_</span>;
};

<span style="color: #98fb98;">void</span> <span style="color: #7fffd4;">MenuItem</span>::<span style="color: #87cefa;">print</span>() <span style="color: #00ffff;">const</span> {
  cout &lt;&lt; <span style="color: #ffa07a;">"  "</span> &lt;&lt; name();
  <span style="color: #00ffff;">if</span> (isVegetarian()) {
    cout &lt;&lt; <span style="color: #ffa07a;">"(v)"</span>;
  }
  cout &lt;&lt; <span style="color: #ffa07a;">", "</span> &lt;&lt; price() &lt;&lt; endl;
  cout &lt;&lt; <span style="color: #ffa07a;">"    -- "</span> &lt;&lt; description() &lt;&lt; endl;
}

<span style="color: #98fb98;">Iterator</span>* <span style="color: #7fffd4;">MenuItem</span>::<span style="color: #87cefa;">createIterator</span>() {
  <span style="color: #00ffff;">return</span> <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">NullIterator</span>();
}
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2-2-3" class="outline-4">
<h4 id="sec-2-2-3"><span class="section-number-4">2.2.3</span> 实现 <code>Menu</code> （组合节点）</h4>
<div class="outline-text-4" id="text-2-2-3">
<p>
<code>Menu</code> 类和 <code>MenuItem</code> 类都继承于构件接口类，大部分相同，但
</p>
<ul class="org-ul">
<li><code>Menu</code> 有子节点，实现 <code>getChild</code> 功能;
</li>
<li><code>Menu</code> 需要遍历所有它的子节点，实现创建组合迭代器;
</li>
<li><code>Menu</code> 打印所有它节点下的菜单项，包括自身的和所有子节点的。
</li>
</ul>

<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00ffff;">class</span> <span style="color: #98fb98;">Menu</span> : <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">MenuComponent</span> {
 <span style="color: #00ffff;">public</span>:
  <span style="color: #87cefa;">Menu</span>(<span style="color: #00ffff;">const</span> <span style="color: #98fb98;">string</span> &amp;<span style="color: #eedd82;">name</span>, <span style="color: #00ffff;">const</span> <span style="color: #98fb98;">string</span> &amp;<span style="color: #eedd82;">description</span>);
  ~<span style="color: #87cefa;">Menu</span>();
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">add</span>(<span style="color: #98fb98;">MenuComponent</span> *<span style="color: #eedd82;">menu_component</span>);
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">remove</span>(<span style="color: #98fb98;">MenuComponent</span> *<span style="color: #eedd82;">menu_component</span>);
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">MenuComponent</span>* <span style="color: #87cefa;">getChild</span>(<span style="color: #98fb98;">int</span> <span style="color: #eedd82;">i</span>) <span style="color: #00ffff;">const</span>;
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">string</span> <span style="color: #87cefa;">name</span>() <span style="color: #00ffff;">const</span> {
    <span style="color: #00ffff;">return</span> name_;
  }
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">string</span> <span style="color: #87cefa;">description</span>() <span style="color: #00ffff;">const</span> {
    <span style="color: #00ffff;">return</span> description_;
  }
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">Iterator</span>* <span style="color: #87cefa;">createIterator</span>();
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">print</span>() <span style="color: #00ffff;">const</span>;
 <span style="color: #00ffff;">private</span>:
  <span style="color: #98fb98;">string</span> <span style="color: #eedd82;">name_</span>;
  <span style="color: #98fb98;">string</span> <span style="color: #eedd82;">description_</span>;
  <span style="color: #98fb98;">vector</span>&lt;<span style="color: #98fb98;">MenuComponent</span>*&gt; *<span style="color: #eedd82;">menu_components_</span>;
};

<span style="color: #98fb98;">MenuComponent</span>* <span style="color: #7fffd4;">Menu</span>::<span style="color: #87cefa;">getChild</span>(<span style="color: #98fb98;">int</span> <span style="color: #eedd82;">i</span>) <span style="color: #00ffff;">const</span> {
  <span style="color: #00ffff;">if</span> (i &lt; 0 || i &gt;= menu_components_-&gt;size()) {
    <span style="color: #00ffff;">return</span> <span style="color: #7fffd4;">NULL</span>;
  }
  <span style="color: #00ffff;">return</span> menu_components_-&gt;at(i);
}

<span style="color: #98fb98;">Iterator</span>* <span style="color: #7fffd4;">Menu</span>::<span style="color: #87cefa;">createIterator</span>() {
  <span style="color: #00ffff;">return</span> <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">Composite</span> Iterator(<span style="color: #00ffff;">new</span> <span style="color: #98fb98;">MenuIterator</span>(menu_components_));
}

<span style="color: #98fb98;">void</span> <span style="color: #7fffd4;">Menu</span>::<span style="color: #87cefa;">print</span>() <span style="color: #00ffff;">const</span> {
  cout &lt;&lt; endl &lt;&lt; name();
  cout &lt;&lt; <span style="color: #ffa07a;">", "</span> &lt;&lt; description() &lt;&lt; endl;
  cout &lt;&lt; <span style="color: #ffa07a;">"---------------------"</span> &lt;&lt; endl;
  <span style="color: #00ffff;">for</span> (<span style="color: #98fb98;">int</span> <span style="color: #eedd82;">i</span> = 0; i &lt; menu_components_-&gt;size(); ++i) {
    <span style="color: #98fb98;">MenuComponent</span> *<span style="color: #eedd82;">item</span> = menu_components_-&gt;at(i);
    item-&gt;print();
  }
}
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2-2-4" class="outline-4">
<h4 id="sec-2-2-4"><span class="section-number-4">2.2.4</span> 实现组合迭代器</h4>
<div class="outline-text-4" id="text-2-2-4">
<p>
组合迭代器 <code>CompositeIterator</code> 继承于迭代器接口 <code>Iterator</code> 。组合迭起器实现起来更复杂，需要考虑树状结构的遍历，这里利用堆栈来保存组合节点，实现深度优先的遍历。
</p>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00ffff;">class</span> <span style="color: #98fb98;">CompositeIterator</span> : <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">Iterator</span> {
 <span style="color: #00ffff;">public</span>:
  <span style="color: #00ffff;">explicit</span> <span style="color: #87cefa;">CompositeIterator</span>(<span style="color: #98fb98;">Iterator</span> *<span style="color: #eedd82;">iterator</span>);
  ~<span style="color: #87cefa;">CompositeIterator</span>();
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">bool</span> <span style="color: #87cefa;">hasNext</span>();
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">void</span>* <span style="color: #87cefa;">next</span>();
 <span style="color: #00ffff;">private</span>:
  <span style="color: #98fb98;">stack</span>&lt;<span style="color: #98fb98;">Iterator</span>*&gt; *<span style="color: #eedd82;">stack_</span>;
};

<span style="color: #98fb98;">bool</span> <span style="color: #7fffd4;">CompositeIterator</span>::<span style="color: #87cefa;">hasNext</span>() {
  <span style="color: #00ffff;">if</span> (stack_-&gt;empty()) {
    <span style="color: #00ffff;">return</span> <span style="color: #7fffd4;">false</span>;
  } <span style="color: #00ffff;">else</span> {
    <span style="color: #98fb98;">Iterator</span> *<span style="color: #eedd82;">iterator</span> = stack_-&gt;top();
    <span style="color: #00ffff;">if</span> (!iterator-&gt;hasNext()) {
      stack_-&gt;pop();
      <span style="color: #00ffff;">delete</span> iterator;
      <span style="color: #00ffff;">return</span> hasNext();
    } <span style="color: #00ffff;">else</span> {
      <span style="color: #00ffff;">return</span> <span style="color: #7fffd4;">true</span>;
    }
  }
}

<span style="color: #98fb98;">void</span>* <span style="color: #7fffd4;">CompositeIterator</span>::<span style="color: #87cefa;">next</span>() {
  <span style="color: #00ffff;">if</span> (hasNext()) {
    <span style="color: #98fb98;">Iterator</span> *<span style="color: #eedd82;">iterator</span> = stack_-&gt;top();
    <span style="color: #98fb98;">MenuComponent</span> *<span style="color: #eedd82;">component</span> =
        <span style="color: #00ffff;">reinterpret_cast</span>&lt;MenuComponent*&gt;(iterator-&gt;next());
    <span style="color: #00ffff;">if</span> (<span style="color: #00ffff;">typeid</span>(*component) == <span style="color: #00ffff;">typeid</span>(Menu)) {
      stack_-&gt;push(component-&gt;createIterator());
    }
    <span style="color: #00ffff;">return</span> component;
  } <span style="color: #00ffff;">else</span> {
    <span style="color: #00ffff;">return</span> <span style="color: #7fffd4;">NULL</span>;
  }
}
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2-2-5" class="outline-4">
<h4 id="sec-2-2-5"><span class="section-number-4">2.2.5</span> <code>Waitress</code> 访问菜单</h4>
<div class="outline-text-4" id="text-2-2-5">
<ul class="org-ul">
<li><code>Waitress</code> 打印菜单直接调用构件的打印功能;
</li>
<li>打印蔬菜菜单，利用组合迭代器遍历并判断蔬菜菜单
</li>
</ul>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #98fb98;">void</span> <span style="color: #7fffd4;">Waitress</span>::<span style="color: #87cefa;">printMenu</span>() {
  all_menus_-&gt;print();
}

<span style="color: #98fb98;">void</span> <span style="color: #7fffd4;">Waitress</span>::<span style="color: #87cefa;">printVegetarianMenu</span>() {
  <span style="color: #98fb98;">Iterator</span> *<span style="color: #eedd82;">iterator</span> = all_menus_-&gt;createIterator();
  cout &lt;&lt; <span style="color: #ffa07a;">"\nVEGETARIAN MENU\n----"</span> &lt;&lt; endl;
  <span style="color: #00ffff;">while</span> (iterator-&gt;hasNext()) {
    <span style="color: #98fb98;">MenuComponent</span> *<span style="color: #eedd82;">menu_component</span> = <span style="color: #00ffff;">reinterpret_cast</span>&lt;MenuComponent *&gt;
        (iterator-&gt;next());
    <span style="color: #00ffff;">try</span> {
      <span style="color: #00ffff;">if</span> (menu_component-&gt;isVegetarian()) {
        menu_component-&gt;print();
      }
    } <span style="color: #00ffff;">catch</span> (exception &amp;ex) {
    }
  }
  <span style="color: #00ffff;">delete</span> iterator;
}
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2-2-6" class="outline-4">
<h4 id="sec-2-2-6"><span class="section-number-4">2.2.6</span> 组合菜单</h4>
<div class="outline-text-4" id="text-2-2-6">
<p>
用 <code>MenuItem</code> 创建各个菜单项，把各个菜单目录组合只需用构件的 <code>add</code> 函数来完成，如下：
</p>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #98fb98;">MenuComponent</span> *<span style="color: #eedd82;">cafe_menu</span> = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">Menu</span>(<span style="color: #ffa07a;">"CAFE MENU"</span>, <span style="color: #ffa07a;">"Dinner"</span>);
<span style="color: #98fb98;">MenuComponent</span> *<span style="color: #eedd82;">coffee_menu</span> =
      <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">Menu</span>(<span style="color: #ffa07a;">"COFFEE MENU"</span>, <span style="color: #ffa07a;">"Stuff to go with your afternoon coffee"</span>);

cafe_menu-&gt;add(<span style="color: #00ffff;">new</span> <span style="color: #98fb98;">MenuItem</span>(
      <span style="color: #ffa07a;">"Burrito"</span>,
      <span style="color: #ffa07a;">"A large burrito, with whole pinto beans, salsa, guacamole"</span>,
      <span style="color: #7fffd4;">true</span>, 
      4.29));

cafe_menu-&gt;add(coffee_menu);

coffee_menu-&gt;add(<span style="color: #00ffff;">new</span> <span style="color: #98fb98;">MenuItem</span>(
    <span style="color: #ffa07a;">"Coffee Cake"</span>,
    <span style="color: #ffa07a;">"Crumbly cake topped with cinnamon and walnuts"</span>,
    <span style="color: #7fffd4;">true</span>,
    1.59));
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2-2-7" class="outline-4">
<h4 id="sec-2-2-7"><span class="section-number-4">2.2.7</span> 总的设计框架</h4>
<div class="outline-text-4" id="text-2-2-7">
<img src="/images/blog/2014/composite/menu_structure.jpeg">
</div>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 总结</h2>
<div class="outline-text-2" id="text-3">
</div><div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> 组合模式(Composite)结构</h3>
<div class="outline-text-3" id="text-3-1">
<img src="/images/blog/2014/composite/composite_structure.jpeg">

<p>
一个典型组合对象结构类似如下图：
</p>
<img src="/images/blog/2014/composite/composite_object_structure.jpeg">
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> 组成</h3>
<div class="outline-text-3" id="text-3-2">
<ul class="org-ul">
<li>构件类（Component）
<ol class="org-ol">
<li>为组合模式中的对象声明接口。
</li>
<li>适当的为所有类共有接口实现默认的行为。
</li>
<li>声明一个接口来访问和管理它的子节点。
</li>
<li>（可选的）定义一个接口来访问一个构件在递归结构下的父元件，如果适当的话，并实现这个接口
</li>
</ol>
</li>
<li>树叶类（Leaf）
<ol class="org-ol">
<li>在组合模式中表示树叶类。一个树叶类没有子节点。
</li>
<li>在组合模式中为基础对象定义行为。
</li>
</ol>
</li>
<li>客户（Client)
通过元件接口来操作组合模式中的对象。
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3"><span class="section-number-3">3.3</span> 应用场景</h3>
<div class="outline-text-3" id="text-3-3">
<ul class="org-ul">
<li>你想表示对象的部分-整体层次结构。
</li>
<li>你想客户能够忽略对象组合和单个对象的区别。客户能一致的对待组合结构中的所有对象。
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-3-4" class="outline-3">
<h3 id="sec-3-4"><span class="section-number-3">3.4</span> 缺点</h3>
<div class="outline-text-3" id="text-3-4">
<p>
组合模式其中一个特性是：使得你的设计更具一般性。添加新构件很容易的缺点就是使得很难限制组合模式中的构件。有时你想要一个组合只有某些特性的元件，但是，使用组合模式，你不能依靠类型系统来实施这些限制，你不得不使用运行时检查。
</p>
</div>
</div>
</div>
]]></content>
  </entry>
  
</feed>
