<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: State | (learn&think)]]></title>
  <link href="http://dreamrunner.org/tags/state/atom.xml" rel="self"/>
  <link href="http://dreamrunner.org/"/>
  <updated>2014-06-24T20:35:30+08:00</updated>
  <id>http://dreamrunner.org/</id>
  <author>
    <name><![CDATA[DreamRunner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[浅谈设计模式十三：状态模式(State)]]></title>
    <link href="http://dreamrunner.org/blog/2014/05/04/%E6%B5%85%E8%B0%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F13/"/>
    <updated>2014-05-04T00:00:00+08:00</updated>
    <id>http://dreamrunner.org/blog/2014/05/04/浅谈设计模式13</id>
    <content type="html"><![CDATA[<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 实例</h2>
<div class="outline-text-2" id="text-1">
<img src="/images/blog/2014/state/machine_state_diagram.jpeg">

<p>
实现如上运行的糖果机，基本的做法就是定义好每个状态，然后把每个状态转换的行为定义为一个函数方法来实现状态间的转换。
</p>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00ffff;">class</span> <span style="color: #98fb98;">GumballMachine</span> {
 <span style="color: #00ffff;">public</span>:
  <span style="color: #00ffff;">explicit</span> <span style="color: #87cefa;">GumballMachine</span>(<span style="color: #98fb98;">int</span> <span style="color: #eedd82;">cout</span>);
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">insertQuarter</span>();
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">ejectQuarter</span>();
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">turnCrank</span>();
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">dispense</span>();
 <span style="color: #00ffff;">private</span>:
  <span style="color: #00ffff;">const</span> <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">SOLD_OUT</span> = 0;
  <span style="color: #00ffff;">const</span> <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">NO_QUARTER</span> = 1;
  <span style="color: #00ffff;">const</span> <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">HAS_QUARTER</span> = 2;
  <span style="color: #00ffff;">const</span> <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">SOLD</span> = 3;
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">state</span>;
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">count</span>;
};
</pre>
</div>

<p>
现在糖果机生产商想新添加一个幸运机制，添加一个 <code>winner</code> 状态，有1/10的概率成为Winner，免费获得一个糖果，状态机图如下：
</p>

<img src="/images/blog/2014/state/machine_winner_state_diagram.jpeg">

<p>
在原有的代码上新添加这个状态，需要在每个转换函数里修改，以致很多处修改，容易产生错误。分析这个设计的缺陷：
</p>
<ul class="org-ul">
<li>状态转换不明显，一堆判断语句在每个转换函数里;
</li>
<li>没有封装好变化部分和不变化部分，使得两者纠缠在一起;
</li>
<li>进一步添加与修改容易产生bugs。
</li>
</ul>

<!-- more -->
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 状态模式(State)</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1"><span class="section-number-3">2.1</span> 目的</h3>
<div class="outline-text-3" id="text-2-1">
<p>
允许一个对象当它的内部状态改变时改变它的行为。这个对象看起来改变了它的类。
</p>
</div>
</div>

<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2"><span class="section-number-3">2.2</span> 实现</h3>
<div class="outline-text-3" id="text-2-2">
<p>
按照状态模式：
</p>
<ol class="org-ol">
<li>定义抽象状态接口，包含糖果机每个状态转换行为的方法;
</li>
<li>根据接口为糖果机每个状态独立实现状态类；
</li>
<li>糖果机摆脱大量的判断语句，把状态如何转换的功能由各个状态类独立实现。
</li>
</ol>

<p>
如此把整个复杂的状态机整理的比较清晰，最后状态类图如下,<a href="https://github.com/shishougang/DesignPattern-CPP/tree/master/src/state">代码实例在这里</a>。
</p>
<img src="/images/blog/2014/state/machine_class.jpeg">
</div>
<div id="outline-container-sec-2-2-1" class="outline-4">
<h4 id="sec-2-2-1"><span class="section-number-4">2.2.1</span> 定义抽象状态接口</h4>
<div class="outline-text-4" id="text-2-2-1">
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00ffff;">class</span> <span style="color: #98fb98;">State</span> {
 <span style="color: #00ffff;">public</span>:
  <span style="color: #00ffff;">virtual</span> ~<span style="color: #87cefa;">State</span>() {}
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">insertQuarter</span>() = 0;
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">ejectQuarter</span>() = 0;
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">turnCrank</span>() = 0;
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">dispense</span>() = 0;
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">string</span> <span style="color: #87cefa;">toString</span>() = 0;
};
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2-2-2" class="outline-4">
<h4 id="sec-2-2-2"><span class="section-number-4">2.2.2</span> 实现状态类</h4>
<div class="outline-text-4" id="text-2-2-2">
<p>
为糖果机每个状态独立实现状态类，这里 <code>NoQuarterState</code> 类为例如下，
<code>NoQuarterState</code> 类保存 <code>GumballMachine</code> 的实例，来实现设置糖果机状态的改变。
</p>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00ffff;">class</span> <span style="color: #98fb98;">NoQuarterState</span> : <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">State</span> {
 <span style="color: #00ffff;">public</span>:
  <span style="color: #00ffff;">explicit</span> <span style="color: #87cefa;">NoQuarterState</span>(<span style="color: #98fb98;">GumballMachine</span> *<span style="color: #eedd82;">gumball_machine</span>);
  <span style="color: #00ffff;">virtual</span> ~<span style="color: #87cefa;">NoQuarterState</span>();
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">insertQuarter</span>();
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">ejectQuarter</span>();
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">turnCrank</span>();
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">dispense</span>();
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">string</span> <span style="color: #87cefa;">toString</span>();
 <span style="color: #00ffff;">private</span>:
  <span style="color: #98fb98;">GumballMachine</span> *<span style="color: #eedd82;">gumball_machine_</span>;
};

<span style="color: #98fb98;">void</span> <span style="color: #7fffd4;">NoQuarterState</span>::<span style="color: #87cefa;">insertQuarter</span>() {
  cout &lt;&lt; <span style="color: #ffa07a;">"You inserted a quarter"</span> &lt;&lt; endl;
  gumball_machine_-&gt;setState(gumball_machine_-&gt;has_quarter_state());
}

<span style="color: #98fb98;">void</span> <span style="color: #7fffd4;">NoQuarterState</span>::<span style="color: #87cefa;">ejectQuarter</span>() {
  cout &lt;&lt; <span style="color: #ffa07a;">"You haven't inserted a quarter"</span> &lt;&lt; endl;
}

<span style="color: #98fb98;">void</span> <span style="color: #7fffd4;">NoQuarterState</span>::<span style="color: #87cefa;">turnCrank</span>() {
  cout &lt;&lt; <span style="color: #ffa07a;">"You turned, but there's no quarter"</span> &lt;&lt; endl;
}

<span style="color: #98fb98;">void</span> <span style="color: #7fffd4;">NoQuarterState</span>::<span style="color: #87cefa;">dispense</span>() {
  cout &lt;&lt; <span style="color: #ffa07a;">"You need to pay first"</span> &lt;&lt; endl;
}

<span style="color: #98fb98;">string</span> <span style="color: #7fffd4;">NoQuarterState</span>::<span style="color: #87cefa;">toString</span>() {
  <span style="color: #00ffff;">return</span> <span style="color: #ffa07a;">"waiting for quarter"</span>;
}
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2-2-3" class="outline-4">
<h4 id="sec-2-2-3"><span class="section-number-4">2.2.3</span> 重作 <code>GumballMachine</code> 类</h4>
<div class="outline-text-4" id="text-2-2-3">
<p>
糖果机摆脱大量的判断语句，把状态如何转换的功能由各个状态类独立实现，整个类显得很清晰：
</p>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #7fffd4;">GumballMachine</span>::<span style="color: #87cefa;">GumballMachine</span>(<span style="color: #98fb98;">int</span> <span style="color: #eedd82;">number_gumballs</span>) :
    count_(number_gumballs), state_(sold_out_state_) {
  sold_out_state_ = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">SoldOutState</span>(<span style="color: #00ffff;">this</span>);
  no_quarter_state_ = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">NoQuarterState</span>(<span style="color: #00ffff;">this</span>);
  has_quarter_state_ = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">HasQuarterState</span>(<span style="color: #00ffff;">this</span>);
  sold_state_ = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">SoldState</span>(<span style="color: #00ffff;">this</span>);
  <span style="color: #00ffff;">if</span> (count_ &gt; 0) {
    state_ = no_quarter_state_;
  }
}

<span style="color: #98fb98;">void</span> <span style="color: #7fffd4;">GumballMachine</span>::<span style="color: #87cefa;">insertQuarter</span>() {
  state_-&gt;insertQuarter();
}

<span style="color: #98fb98;">void</span> <span style="color: #7fffd4;">GumballMachine</span>::<span style="color: #87cefa;">ejectQuarter</span>() {
  state_-&gt;ejectQuarter();
}

<span style="color: #98fb98;">void</span> <span style="color: #7fffd4;">GumballMachine</span>::<span style="color: #87cefa;">turnCrank</span>() {
  state_-&gt;turnCrank();
  state_-&gt;dispense();
}

<span style="color: #98fb98;">void</span> <span style="color: #7fffd4;">GumballMachine</span>::<span style="color: #87cefa;">releaseBall</span>() {
  cout &lt;&lt; <span style="color: #ffa07a;">"A gumball comes rolling out the slot..."</span> &lt;&lt; endl;
  <span style="color: #00ffff;">if</span> (count_ != 0) {
    count_--;
  }
}

<span style="color: #98fb98;">void</span> <span style="color: #7fffd4;">GumballMachine</span>::<span style="color: #87cefa;">refill</span>(<span style="color: #98fb98;">int</span> <span style="color: #eedd82;">count</span>) {
  count_ = count;
  state_ = no_quarter_state_;
}
</pre>
</div>
</div>
</div>
</div>
</div>
<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 总结</h2>
<div class="outline-text-2" id="text-3">
</div><div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> 状态模式(State)结构</h3>
<div class="outline-text-3" id="text-3-1">
<img src="/images/blog/2014/state/state_structure.jpeg">
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> 组成</h3>
<div class="outline-text-3" id="text-3-2">
<ul class="org-ul">
<li>场景类（Context）
<ol class="org-ol">
<li>定义用户感兴趣的接口。
</li>
<li>保存一个定义当前状态的具体状态（ConcreteState）子类的实例。
</li>
</ol>
</li>
<li>抽象状态类(State)
定义接口来封装与场景类（Context）的每个特殊状态相关的行为。
</li>
<li>具体状态子类（ConcreteState subclasses）每个子类实现与场景类（Context）每个状态相关的行为。
</li>
</ul>
</div>
</div>
<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3"><span class="section-number-3">3.3</span> 应用场景</h3>
<div class="outline-text-3" id="text-3-3">
<ul class="org-ul">
<li>一个对象的行为依赖于它的状态，并且再运行时它必须依赖于这个状态来改变它的行为。
</li>
<li>代码操作中拥有大量的依赖于对象状态的条件语句。这个状态通常被一个多多个枚举定值表示。时常，许多操作包含这同样的条件分支结构。状态模式将每个分支放入一个独立的类中。这让你可以把对象的状态当成每个自己负责的对象，而且这些对象能互相独立。
</li>
</ul>
</div>
</div>
</div>
]]></content>
  </entry>
  
</feed>
