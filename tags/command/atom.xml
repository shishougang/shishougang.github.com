<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Command | (learn&think)]]></title>
  <link href="http://shishougang.github.com/tags/command/atom.xml" rel="self"/>
  <link href="http://shishougang.github.com/"/>
  <updated>2014-05-26T22:52:23+08:00</updated>
  <id>http://shishougang.github.com/</id>
  <author>
    <name><![CDATA[DreamRunner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[浅谈设计模式七: 命令模式(Command)]]></title>
    <link href="http://shishougang.github.com/blog/2014/05/03/%E6%B5%85%E8%B0%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F7/"/>
    <updated>2014-05-03T00:00:00+08:00</updated>
    <id>http://shishougang.github.com/blog/2014/05/03/浅谈设计模式7</id>
    <content type="html"><![CDATA[<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 实例</h2>
<div class="outline-text-2" id="text-1">
<p>
有一个远程控制器，上面有很多按钮，每个按钮分配不同的功能，比如打开客厅灯，关闭客厅灯，调高风扇的风力，关闭风扇等。那么整个家庭会有如下那么多的控制对象，如何很好的维护，易扩展，易独立改变呢？
</p>
<img src="/images/blog/2014/command/command_objects.jpeg">

<!-- more -->
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 命令模式(Command)</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1"><span class="section-number-3">2.1</span> 目的</h3>
<div class="outline-text-3" id="text-2-1">
<p>
把一个请求封装成一个对象，因而可以让你通过不同的请求，队列或日志请求来参数化客户，并且支持撤销操作。
</p>
</div>
</div>

<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2"><span class="section-number-3">2.2</span> 实现</h3>
<div class="outline-text-3" id="text-2-2">
<p>
<a href="https://github.com/shishougang/DesignPattern-CPP/tree/master/src/command">代码实例在这里</a>。
</p>
</div>
<div id="outline-container-sec-2-2-1" class="outline-4">
<h4 id="sec-2-2-1"><span class="section-number-4">2.2.1</span> 定义命令类接口</h4>
<div class="outline-text-4" id="text-2-2-1">
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00ffff;">class</span> <span style="color: #98fb98;">Command</span> {
 <span style="color: #00ffff;">public</span>:
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">execute</span>() = 0;
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">undo</span>() = 0;
};
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2-2-2" class="outline-4">
<h4 id="sec-2-2-2"><span class="section-number-4">2.2.2</span> 每个设备定义自己的功能类</h4>
<div class="outline-text-4" id="text-2-2-2">
<p>
如灯的控制：
</p>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00ffff;">class</span> <span style="color: #98fb98;">Light</span> {
 <span style="color: #00ffff;">public</span>:
  <span style="color: #00ffff;">explicit</span> <span style="color: #87cefa;">Light</span>(<span style="color: #98fb98;">string</span> <span style="color: #eedd82;">location</span>);
  <span style="color: #00ffff;">virtual</span> ~<span style="color: #87cefa;">Light</span>();
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">on</span>();
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">off</span>();
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">dim</span>(<span style="color: #98fb98;">int</span> <span style="color: #eedd82;">level</span>);
  <span style="color: #98fb98;">int</span> <span style="color: #87cefa;">level</span>();
 <span style="color: #00ffff;">private</span>:
  <span style="color: #98fb98;">string</span> <span style="color: #eedd82;">location_</span>;
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">level_</span>;
};
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2-2-3" class="outline-4">
<h4 id="sec-2-2-3"><span class="section-number-4">2.2.3</span> 对每个设备封装各自的具体命令类，实现命令接口</h4>
<div class="outline-text-4" id="text-2-2-3">
<p>
如灯的开命令类：
</p>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00ffff;">class</span> <span style="color: #98fb98;">LightOnCommand</span> : <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">Command</span> {
 <span style="color: #00ffff;">public</span>:
  <span style="color: #00ffff;">explicit</span> <span style="color: #87cefa;">LightOnCommand</span>(<span style="color: #98fb98;">Light</span>* <span style="color: #eedd82;">light</span>);
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">execute</span>();
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">undo</span>();
 <span style="color: #00ffff;">private</span>:
  <span style="color: #98fb98;">Light</span>* <span style="color: #eedd82;">light_</span>;
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">level_</span>;
};
</pre>
</div>
<p>
灯的关命令类：
</p>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00ffff;">class</span> <span style="color: #98fb98;">LightOffCommand</span> : <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">Command</span> {
 <span style="color: #00ffff;">public</span>:
  <span style="color: #00ffff;">explicit</span> <span style="color: #87cefa;">LightOffCommand</span>(<span style="color: #98fb98;">Light</span>* <span style="color: #eedd82;">light</span>);
  <span style="color: #00ffff;">virtual</span> ~<span style="color: #87cefa;">LightOffCommand</span>();
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">execute</span>();
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">undo</span>();
 <span style="color: #00ffff;">private</span>:
  <span style="color: #98fb98;">Light</span>* <span style="color: #eedd82;">light_</span>;
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">level_</span>;
};
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2-2-4" class="outline-4">
<h4 id="sec-2-2-4"><span class="section-number-4">2.2.4</span> 定义远程控制器（调用者）</h4>
<div class="outline-text-4" id="text-2-2-4">
<p>
<code>RemoteControl</code> 类用数组存储各个命令，映射到控制按钮器各个按钮上。
</p>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00ffff;">class</span> <span style="color: #98fb98;">RemoteControl</span> {
 <span style="color: #00ffff;">public</span>:
  <span style="color: #87cefa;">RemoteControl</span>();
  <span style="color: #00ffff;">virtual</span> ~<span style="color: #87cefa;">RemoteControl</span>();
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">setCommand</span>(<span style="color: #98fb98;">int</span> <span style="color: #eedd82;">slot</span>, <span style="color: #98fb98;">Command</span> *<span style="color: #eedd82;">on_command</span>, <span style="color: #98fb98;">Command</span> *<span style="color: #eedd82;">off_command</span>);
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">onButtonWasPushed</span>(<span style="color: #98fb98;">int</span> <span style="color: #eedd82;">slot</span>);
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">offButtonWasPushed</span>(<span style="color: #98fb98;">int</span> <span style="color: #eedd82;">slot</span>);
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">undoButtonWasPushed</span>();
  <span style="color: #98fb98;">string</span> <span style="color: #87cefa;">toString</span>();
 <span style="color: #00ffff;">private</span>:
  <span style="color: #98fb98;">Command</span>* <span style="color: #eedd82;">on_commands_</span>[7];
  <span style="color: #98fb98;">Command</span>* <span style="color: #eedd82;">off_commands_</span>[7];
  <span style="color: #98fb98;">Command</span>* <span style="color: #eedd82;">undo_command_</span>;
};
</pre>
</div>
</div>
</div>
</div>
</div>
<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 总结</h2>
<div class="outline-text-2" id="text-3">
</div><div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> 命令模式(Command)结构</h3>
<div class="outline-text-3" id="text-3-1">
<img src="/images/blog/2014/command/command_structure.jpeg">
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> 组成</h3>
<div class="outline-text-3" id="text-3-2">
<ul class="org-ul">
<li>命令(Command)
为执行一个操作声明一个接口
</li>
<li>具体命令(ConcreteCommand)
<ol class="org-ol">
<li>在命令接收对象与操作间定义一个连接
</li>
<li>通过在接收者引起相应的操作来实现执行操作
</li>
</ol>
</li>
<li>客户(Client)
创建一个具体的命令对象并设置它的接收者
</li>
<li>调用者请求命令对象执行请求
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3"><span class="section-number-3">3.3</span> 应用场景</h3>
<div class="outline-text-3" id="text-3-3">
<ul class="org-ul">
<li>通过调用来更改对象的参数，类似注册一个回调函数，解耦调用者和接收者。
</li>
<li>指定请求，排队请求或执行请求在不同时间。命令模式对象生命周期可以独立于原请求。
</li>
<li>支持撤销请求操作。
</li>
<li>支持记录变化，使得系统崩溃时能重新应用之前的变化。也就是恢复操作。
</li>
<li>支持事务处理。一个事务封装对数据的一系列的变化.命令类有一个共同的接口，可以让你同一方式调用所有的事务。
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-3-4" class="outline-3">
<h3 id="sec-3-4"><span class="section-number-3">3.4</span> 协作</h3>
<div class="outline-text-3" id="text-3-4">
<img src="/images/blog/2014/command/command_collaboration.jpeg">
<p>
上图显示这些对象之间的交互。它阐明了命令设计模式如何把调用者从接收者中解藕出来。
</p>
<ol class="org-ol">
<li>客户类创建一个具体的命令对象并指定它的命令接收者。
</li>
<li>调用者对象存储好这个具体命令对象。
</li>
<li>调用者通过命令类的执行函数发出一个请求。当命令对象支持撤销时，具体命令对象在调用命令前，存储当前的状态以备撤销命令。
</li>
<li>具体命令对象再它的接收者那调用操作来执行之前的请求。
</li>
</ol>
</div>
</div>
</div>
]]></content>
  </entry>
  
</feed>
