<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Flyweight | (learn&think)]]></title>
  <link href="http://shishougang.github.com/tags/flyweight/atom.xml" rel="self"/>
  <link href="http://shishougang.github.com/"/>
  <updated>2014-05-18T22:46:39+08:00</updated>
  <id>http://shishougang.github.com/</id>
  <author>
    <name><![CDATA[DreamRunner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[浅谈设计模式十八: 享元模式(Flyweight)]]></title>
    <link href="http://shishougang.github.com/blog/2014/05/04/%E6%B5%85%E8%B0%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F18/"/>
    <updated>2014-05-04T00:00:00+08:00</updated>
    <id>http://shishougang.github.com/blog/2014/05/04/浅谈设计模式18</id>
    <content type="html"><![CDATA[<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 实例</h2>
<div class="outline-text-2" id="text-1">
<p>
绘画培训班内，一次绘图课上，每个学员要练习大量不同颜色的圆形，那么如果为每个学员都实例和维护不同颜色圆的实例话，将产生很多重复颜色的圆，占用很多存储开销，那么如何大家共享这些圆的实例呢？
</p>

<!-- more -->
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 享元模式(Flyweight)</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1"><span class="section-number-3">2.1</span> 目的</h3>
<div class="outline-text-3" id="text-2-1">
<p>
使用共享机制来有效支持大量细粒度的对象。
</p>
</div>
</div>

<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2"><span class="section-number-3">2.2</span> 实现</h3>
<div class="outline-text-3" id="text-2-2">
<p>
这里圆形作为享元类，可以被大家所共享，并建立相应的享元工厂类来创建和管理享元对象。并确保合理的共享享元类。当一个客户请求一个享元类时，享元工厂对象提供一个已存在的实例或如果不存在就创建一个。<a href="https://github.com/shishougang/DesignPattern-CPP/tree/master/src/flyweight">代码实例在这里</a>。
</p>
</div>
<div id="outline-container-sec-2-2-1" class="outline-4">
<h4 id="sec-2-2-1"><span class="section-number-4">2.2.1</span> 享元类： <code>CIrcle</code></h4>
<div class="outline-text-4" id="text-2-2-1">
<p>
颜色作为它的一个状态。
</p>

<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00ffff;">class</span> <span style="color: #98fb98;">Circle</span> : <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">Shape</span> {
 <span style="color: #00ffff;">public</span>:
  <span style="color: #00ffff;">explicit</span> <span style="color: #87cefa;">Circle</span>(<span style="color: #98fb98;">string</span> <span style="color: #eedd82;">color</span>);
  <span style="color: #00ffff;">virtual</span> ~<span style="color: #87cefa;">Circle</span>();
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">set_x</span>(<span style="color: #98fb98;">int</span> <span style="color: #eedd82;">x</span>) {x_ = x;}
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">set_y</span>(<span style="color: #98fb98;">int</span> <span style="color: #eedd82;">y</span>) {y_ = y;}
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">set_radius</span>(<span style="color: #98fb98;">int</span> <span style="color: #eedd82;">radius</span>) {radius_ = radius;}
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">draw</span>();
 <span style="color: #00ffff;">private</span>:
  <span style="color: #98fb98;">string</span> <span style="color: #eedd82;">color_</span>;
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">x_</span>;
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">y_</span>;
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">radius_</span>;
};
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-2-2-2" class="outline-4">
<h4 id="sec-2-2-2"><span class="section-number-4">2.2.2</span> 享元工厂类</h4>
<div class="outline-text-4" id="text-2-2-2">
<p>
利用 <code>map</code> 把颜色作为标识来存储享元类。
</p>

<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00ffff;">class</span> <span style="color: #98fb98;">ShapeFactory</span> {
 <span style="color: #00ffff;">public</span>:
  <span style="color: #00ffff;">virtual</span> ~<span style="color: #87cefa;">ShapeFactory</span>();
  <span style="color: #00ffff;">static</span> <span style="color: #98fb98;">Shape</span>* <span style="color: #87cefa;">getCircle</span>(<span style="color: #98fb98;">string</span> <span style="color: #eedd82;">color</span>);
 <span style="color: #00ffff;">private</span>:
  <span style="color: #00ffff;">static</span> <span style="color: #98fb98;">map</span>&lt;<span style="color: #98fb98;">string</span>, <span style="color: #98fb98;">Shape</span>*&gt; *<span style="color: #eedd82;">map_</span>;
};

<span style="color: #98fb98;">Shape</span>* <span style="color: #7fffd4;">ShapeFactory</span>::<span style="color: #87cefa;">getCircle</span>(<span style="color: #98fb98;">string</span> <span style="color: #eedd82;">color</span>) {
  <span style="color: #7fffd4;">map</span>&lt;<span style="color: #98fb98;">string</span>, <span style="color: #98fb98;">Shape</span>*&gt;::<span style="color: #98fb98;">iterator</span> <span style="color: #eedd82;">it</span>;
  it = map_-&gt;find(color);
  <span style="color: #00ffff;">if</span> (it != map_-&gt;end()) {
    <span style="color: #00ffff;">return</span> it-&gt;second;
  }
  <span style="color: #98fb98;">Circle</span> *<span style="color: #eedd82;">circle</span> = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">Circle</span>(color);
  map_-&gt;insert(<span style="color: #7fffd4;">std</span>::<span style="color: #98fb98;">pair</span>&lt;<span style="color: #98fb98;">string</span>, <span style="color: #98fb98;">Shape</span>*&gt;(color, circle));
  cout &lt;&lt; <span style="color: #ffa07a;">"Creating circle of color:"</span> &lt;&lt; color &lt;&lt; endl;
  <span style="color: #00ffff;">return</span> circle;
}
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-2-2-3" class="outline-4">
<h4 id="sec-2-2-3"><span class="section-number-4">2.2.3</span> 学员共享图形实例</h4>
<div class="outline-text-4" id="text-2-2-3">
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #98fb98;">int</span> <span style="color: #87cefa;">main</span>(<span style="color: #98fb98;">int</span> <span style="color: #eedd82;">argc</span>, <span style="color: #98fb98;">char</span> *<span style="color: #eedd82;">argv</span>[]) {
  <span style="color: #98fb98;">vector</span>&lt;<span style="color: #98fb98;">string</span>&gt; <span style="color: #eedd82;">colors</span>;
  colors.push_back(<span style="color: #ffa07a;">"Red"</span>);
  colors.push_back(<span style="color: #ffa07a;">"Green"</span>);
  colors.push_back(<span style="color: #ffa07a;">"Blue"</span>);
  colors.push_back(<span style="color: #ffa07a;">"White"</span>);
  colors.push_back(<span style="color: #ffa07a;">"Black"</span>);

  <span style="color: #00ffff;">for</span>(<span style="color: #98fb98;">int</span> <span style="color: #eedd82;">i</span> = 0; i &lt; 20; ++i) {
    <span style="color: #98fb98;">Circle</span> *<span style="color: #eedd82;">circle</span> = <span style="color: #00ffff;">dynamic_cast</span>&lt;Circle *&gt;(<span style="color: #7fffd4;">ShapeFactory</span>::getCircle(
        getRandomColor(colors)));
    circle-&gt;set_x(getRandomX());
    circle-&gt;set_y(getRandomY());
    circle-&gt;set_radius(100);
    circle-&gt;draw();
  }
  <span style="color: #00ffff;">return</span> 0;
}
</pre>
</div>
</div>
</div>
</div>
</div>
<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 总结</h2>
<div class="outline-text-2" id="text-3">
</div><div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> 享元模式(Flyweight)结构</h3>
<div class="outline-text-3" id="text-3-1">
<img src="/images/blog/2014/flyweight/flyweight_structure.jpeg">
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> 组成</h3>
<div class="outline-text-3" id="text-3-2">
<ul class="org-ul">
<li>抽象享元类（Flyweight）声明一个接口，通过这个接口享元类（Flyweight）可以接收和作用于外部状态。
</li>
<li>具体享元类（ConcreteFlyweight）实现抽象享元类的接口并为内部状态增加存储空间。具体享元类（ConcreteFlyweight）必须是可共享的。它存储的任何状态必须是内部的，也就是说它必须独立于具体享元类（ConcreteFlyweight）所处的场景。
</li>
<li>非共享的具体享元类（UnsharedConcreteFlyweight）不是所有的享元子类必须可共享的。享元类接口使得共享成为可能，但并不强制要求它。通常在享元对象结构的某些层次上，非共享的具体享元素（UnsharedConcreteFlyweight）对象把具体享元素（ConcreteFlyweight）对象作为子节点。
</li>
<li>享元工厂类（FlyweightFactory）
<ol class="org-ol">
<li>创建和管理享元对象。
</li>
<li>确保合理的共享享元类。当一个客户请求一个享元类时，享元工厂对象提供一个已存在的实例或如果不存在就创建一个。
</li>
</ol>
</li>
<li>客户
<ol class="org-ol">
<li>维护享元类的引用。
</li>
<li>计算或存储享元类的外部状态。
</li>
</ol>
</li>
</ul>
</div>
</div>
<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3"><span class="section-number-3">3.3</span> 应用场景</h3>
<div class="outline-text-3" id="text-3-3">
<p>
享元模式的有效性严重依赖于如何和在哪被使用。应用享元模式当 <b>以下条件都相符</b> 时：
</p>
<ul class="org-ul">
<li>一个应用使用大量的对象。
</li>
<li>因为大量的对象，从而造成很大的存储开销。
</li>
<li>大多数对象状态可以外部化。
</li>
<li>一旦消除外部状态后，许多组的对象能被相对较少的共享对象所替换。
</li>
<li>应用不依赖于对象的标识。因为享元对象可以被共享，那么对于概念上有别的对象，标识测试也会返回真值。
</li>
</ul>
</div>
</div>
<div id="outline-container-sec-3-4" class="outline-3">
<h3 id="sec-3-4"><span class="section-number-3">3.4</span> 缺点</h3>
<div class="outline-text-3" id="text-3-4">
<p>
共享模式会引入运行时间开销伴随着传送，找寻，或计算外部状态，特别是如果它之前内部存储。但是如此的开销被空间节省抵消，越是更多的享元类被共享越是增加节省的空间。
</p>
</div>
</div>
</div>
]]></content>
  </entry>
  
</feed>
