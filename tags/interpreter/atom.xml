<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Interpreter | (learn&think)]]></title>
  <link href="http://shishougang.github.com/tags/interpreter/atom.xml" rel="self"/>
  <link href="http://shishougang.github.com/"/>
  <updated>2014-05-26T23:04:21+08:00</updated>
  <id>http://shishougang.github.com/</id>
  <author>
    <name><![CDATA[DreamRunner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[浅谈设计模式二十: 解释器模式(Interpreter)]]></title>
    <link href="http://shishougang.github.com/blog/2014/05/04/%E6%B5%85%E8%B0%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F20/"/>
    <updated>2014-05-04T00:00:00+08:00</updated>
    <id>http://shishougang.github.com/blog/2014/05/04/浅谈设计模式20</id>
    <content type="html"><![CDATA[<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 实例</h2>
<div class="outline-text-2" id="text-1">
<p>
以简单计算器为实例,计算器做加减乘除有一套自己的语言(堆栈形式),可以直接计算,那么用语法树来解释并计算计算器语言如何设计呢?
</p>

<!-- more -->
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 解释器模式(Interpreter)</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1"><span class="section-number-3">2.1</span> 目的</h3>
<div class="outline-text-3" id="text-2-1">
<p>
给予一种编程语言，为它的语法定义一种表现形式并包括一个解释器使用这个形式来解释语言中的语句。
</p>
</div>
</div>

<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2"><span class="section-number-3">2.2</span> 实现</h3>
<div class="outline-text-3" id="text-2-2">
<p>
这里只以加法和减法为实例,实现简单的解释器模式来解释计算器的堆栈语言来计算结果。<a href="https://github.com/shishougang/DesignPattern-CPP/tree/master/src/interpreter">代码实例在这里</a>。
</p>
</div>

<div id="outline-container-sec-2-2-1" class="outline-4">
<h4 id="sec-2-2-1"><span class="section-number-4">2.2.1</span> 抽象表达式类</h4>
<div class="outline-text-4" id="text-2-2-1">
<p>
声明一个抽象解释器操作。
</p>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00ffff;">class</span> <span style="color: #98fb98;">Expression</span> {
 <span style="color: #00ffff;">public</span>:
  <span style="color: #00ffff;">virtual</span> ~<span style="color: #87cefa;">Expression</span>() {}
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">int</span> <span style="color: #87cefa;">Interpret</span>() = 0;
};
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-2-2-2" class="outline-4">
<h4 id="sec-2-2-2"><span class="section-number-4">2.2.2</span> 末端表达式类：数字表达式</h4>
<div class="outline-text-4" id="text-2-2-2">
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #98fb98;">int</span> <span style="color: #7fffd4;">NumberExpression</span>::<span style="color: #87cefa;">Interpret</span>() {
  <span style="color: #00ffff;">return</span> number_;
}
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-2-2-3" class="outline-4">
<h4 id="sec-2-2-3"><span class="section-number-4">2.2.3</span> 非末端表达式：加法表达式</h4>
<div class="outline-text-4" id="text-2-2-3">
<p>
实现加法运算的解释器操作，若被解释的对象是非末端表达式，继续递归调用非末端表达式解释器操作。
</p>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #7fffd4;">AddExpression</span>::<span style="color: #87cefa;">AddExpression</span>(<span style="color: #98fb98;">Expression</span> *<span style="color: #eedd82;">left</span>, <span style="color: #98fb98;">Expression</span> *<span style="color: #eedd82;">right</span>) :
    left_expression_(left), right_expression_(right) {
}

<span style="color: #98fb98;">int</span> <span style="color: #7fffd4;">AddExpression</span>::<span style="color: #87cefa;">Interpret</span>() {
  <span style="color: #00ffff;">return</span> left_expression_-&gt;Interpret() + right_expression_-&gt;Interpret();
}
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-2-2-4" class="outline-4">
<h4 id="sec-2-2-4"><span class="section-number-4">2.2.4</span> 非末端表达式：减法表达式</h4>
<div class="outline-text-4" id="text-2-2-4">
<p>
同加法表达式一样，实现减法运算的解释器操作。
</p>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #7fffd4;">SubtractExpression</span>::<span style="color: #87cefa;">SubtractExpression</span>(<span style="color: #98fb98;">Expression</span> *<span style="color: #eedd82;">left</span>, <span style="color: #98fb98;">Expression</span> *<span style="color: #eedd82;">right</span>) :
    left_expression_(left), right_expression_(right) {
}

<span style="color: #98fb98;">int</span> <span style="color: #7fffd4;">SubtractExpression</span>::<span style="color: #87cefa;">Interpret</span>() {
  <span style="color: #00ffff;">return</span> left_expression_-&gt;Interpret() - right_expression_-&gt;Interpret();
}
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-2-2-5" class="outline-4">
<h4 id="sec-2-2-5"><span class="section-number-4">2.2.5</span> 表达式阅读器</h4>
<div class="outline-text-4" id="text-2-2-5">
<p>
包含解释器的全局信息，读取用户表达式，使用解释器解释整个用户表达式语言。
</p>

<div class="org-src-container">

<pre class="src src-c++"><span style="color: #98fb98;">Expression</span>* <span style="color: #7fffd4;">TokenReader</span>::<span style="color: #87cefa;">ReadToken</span>(<span style="color: #98fb98;">vector</span>&lt;<span style="color: #98fb98;">string</span>&gt; *<span style="color: #eedd82;">token_vector</span>) {
  <span style="color: #00ffff;">return</span> ReadNextToken(token_vector);
}

<span style="color: #98fb98;">Expression</span>* <span style="color: #7fffd4;">TokenReader</span>::<span style="color: #87cefa;">ReadNextToken</span>(<span style="color: #98fb98;">vector</span>&lt;<span style="color: #98fb98;">string</span>&gt; *<span style="color: #eedd82;">token_vector</span>) {
  <span style="color: #98fb98;">string</span> <span style="color: #eedd82;">token</span> = token_vector-&gt;at(0);
  <span style="color: #00ffff;">if</span> (token == <span style="color: #ffa07a;">"+"</span> || token == <span style="color: #ffa07a;">"-"</span>){
    <span style="color: #00ffff;">return</span> ReadNonTerminal(token_vector);
  } <span style="color: #00ffff;">else</span> {
    <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">number</span> = atoi(token.c_str());
    token_vector-&gt;erase(token_vector-&gt;begin());
    <span style="color: #00ffff;">return</span> <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">NumberExpression</span>(number);
  }
}

<span style="color: #98fb98;">Expression</span>* <span style="color: #7fffd4;">TokenReader</span>::<span style="color: #87cefa;">ReadNonTerminal</span>(<span style="color: #98fb98;">vector</span>&lt;<span style="color: #98fb98;">string</span>&gt; *<span style="color: #eedd82;">token_vector</span>) {
  <span style="color: #98fb98;">string</span> <span style="color: #eedd82;">token</span> = token_vector-&gt;at(0);
  token_vector-&gt;erase(token_vector-&gt;begin());
  <span style="color: #98fb98;">Expression</span> *<span style="color: #eedd82;">left</span> = ReadNextToken(token_vector);
  <span style="color: #98fb98;">Expression</span> *<span style="color: #eedd82;">right</span> = ReadNextToken(token_vector);
  <span style="color: #00ffff;">if</span> (token == <span style="color: #ffa07a;">"+"</span>) {
    <span style="color: #00ffff;">return</span> <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">AddExpression</span>(left, right);
  } <span style="color: #00ffff;">else</span> <span style="color: #00ffff;">if</span> (token == <span style="color: #ffa07a;">"-"</span>) {
    <span style="color: #00ffff;">return</span> <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">SubtractExpression</span>(left, right);
  }
  <span style="color: #00ffff;">return</span> <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">NullExpression</span>();
}
</pre>
</div>
</div>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 总结</h2>
<div class="outline-text-2" id="text-3">
</div><div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> 解释器模式(Interpreter)结构</h3>
<div class="outline-text-3" id="text-3-1">
<img src="/images/blog/2014/interpreter/interpreter_structure.jpeg">
</div>
</div>
<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> 组成</h3>
<div class="outline-text-3" id="text-3-2">
<ul class="org-ul">
<li>抽象表达式类（AbstractExpression）声明一个抽象解释器操作，它并在抽象语法书中被所有节点所共有。
</li>
<li>末端表达式类（TerminalExpression）
<ol class="org-ol">
<li>实现与在语法中与末端符号相关的解释操作。
</li>
<li>在语句中每个末端符号都需要个实例。
</li>
</ol>
</li>
<li>非末端表达式（NonterminalExpression）
<ol class="org-ol">
<li>在语法中每条规则 \(R ::= R_1R_2 .. R_n\) 都需要一个这样的类。
</li>
<li>从 \(R_1\) 到 \(R_n\) 到的每个符号都维护抽象表达式（AbstractExpression）类型的实力变量。
</li>
<li>实现在语法中非末端表达式的解释操作。解释器通常在 \(R_1\) 到 \(R_n\) 表示的变量中递归的自我调用。
</li>
</ol>
</li>
<li>场景类（Context）包含解释器的全局信息。
</li>
<li>客户（Client）
<ol class="org-ol">
<li>建立（或被给予）表示语法定义的语言中特殊语句的抽象语法树。这个抽象语法书由非末端表示式类（NonterminalExpression）和末端表示式（TerminalExpression)类装配而成。
</li>
<li>调用解释器操作。
</li>
</ol>
</li>
</ul>
</div>
</div>
<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3"><span class="section-number-3">3.3</span> 应用场景</h3>
<div class="outline-text-3" id="text-3-3">
<p>
当一种语言需要解释并且你能把语言内语句表示成一颗抽象的语法树时，使用解释器模式。解释器模式最好应用在当：
</p>
<ul class="org-ul">
<li>语法是简单的。对于复杂的语法，组成语法的类层次变得庞大而不可控。在这种情况下，如分析程序生成器之类的工具会是更好的选择。它们能不建立抽象语法树来分析表达式，从而节省空间和可能的时间。
</li>
<li>效率不是关键的考虑因素。最高效的解释器往往不以直接解释解析树来实现，而是先把它们转换成另外种形式。比如，正则表达式通常被转换成状态机。但即使如此，这个转换器也可以由解析起模式来实现，所以这个模式还是比较实用的。
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-3-4" class="outline-3">
<h3 id="sec-3-4"><span class="section-number-3">3.4</span> 缺点</h3>
<div class="outline-text-3" id="text-3-4">
<p>
复杂的语法很难维护。解释器模式为语法中的每条规则定义至少一个类（以BNF
定义的语法规则可能需要多个类）。因此包含许多规则的语法很难管理和维护。其他设计模式可以应用来消除这个问题（参考Implementation）。但是当语法非常复杂时，比如解析器或编译生成起之类的其他技术更适合。
</p>
</div>
</div>
</div>
]]></content>
  </entry>
  
</feed>
