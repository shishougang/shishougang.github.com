<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Proxy | (learn&think)]]></title>
  <link href="http://dreamrunner.org/tags/proxy/atom.xml" rel="self"/>
  <link href="http://dreamrunner.org/"/>
  <updated>2014-06-22T20:25:32+08:00</updated>
  <id>http://dreamrunner.org/</id>
  <author>
    <name><![CDATA[DreamRunner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[浅谈设计模式十四: 代理模式(Proxy)]]></title>
    <link href="http://dreamrunner.org/blog/2014/05/04/%E6%B5%85%E8%B0%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F14/"/>
    <updated>2014-05-04T00:00:00+08:00</updated>
    <id>http://dreamrunner.org/blog/2014/05/04/浅谈设计模式14</id>
    <content type="html"><![CDATA[<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 实例</h2>
<div class="outline-text-2" id="text-1">
<p>
在酒吧，有不同的酒和喝酒者对象，一开始，喝酒者都能喝酒，没有任何限制。之后，规定年纪小于16岁的不应该喝酒。那么如何在不改动众多的酒类的情况下，限制喝酒的年纪呢？
</p>

<!-- more -->
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 代理模式(Proxy)</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1"><span class="section-number-3">2.1</span> 目的</h3>
<div class="outline-text-3" id="text-2-1">
<p>
为其他的对象提供一个代理来控制访问某个对象。
</p>
</div>
</div>

<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2"><span class="section-number-3">2.2</span> 实现</h3>
<div class="outline-text-3" id="text-2-2">
<p>
这里仅仅是保护代理的一个例子，保护代理控制对原对象的访问。
</p>

<p>
为酒类添加个代理类，有代理类控制喝酒的年纪，喝酒者如同使用实际酒类一样，使用代理酒类，因为代理酒类和实际酒类拥有共同的基类接口。<a href="https://github.com/shishougang/DesignPattern-CPP/tree/master/src/proxy">代码实例在这里</a>。
</p>

<ol class="org-ol">
<li><code>ProxyBear</code> 与 <code>Bear</code> 都继承于 <code>Wine</code>;
</li>
<li><code>ProxyBear</code> 维护一个实际 <code>Bear</code> 的实例，由它代理访问实际对象;
</li>
<li>在 <code>ProxyBear</code> 的 <code>drink</code> 函数中，添加年纪控制。
</li>
</ol>

<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00ffff;">class</span> <span style="color: #98fb98;">ProxyBear</span> : <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">Wine</span> {
 <span style="color: #00ffff;">public</span>:
  <span style="color: #00ffff;">explicit</span> <span style="color: #87cefa;">ProxyBear</span>(<span style="color: #98fb98;">Drinker</span> *<span style="color: #eedd82;">drinker</span>);
  <span style="color: #00ffff;">virtual</span> ~<span style="color: #87cefa;">ProxyBear</span>();
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">drink</span>();
 <span style="color: #00ffff;">private</span>:
  <span style="color: #98fb98;">Wine</span> *<span style="color: #eedd82;">real_bear_</span>;
  <span style="color: #98fb98;">Drinker</span> *<span style="color: #eedd82;">drinker_</span>;
};

<span style="color: #b0c4de;">#define</span> <span style="color: #eedd82;">kDrinkAge</span> 16
<span style="color: #7fffd4;">ProxyBear</span>::<span style="color: #87cefa;">ProxyBear</span>(<span style="color: #98fb98;">Drinker</span> *<span style="color: #eedd82;">drinker</span>) : drinker_(drinker) {
  real_bear_ = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">Bear</span>();
}

<span style="color: #7fffd4;">ProxyBear</span>::~<span style="color: #87cefa;">ProxyBear</span>() {
  <span style="color: #00ffff;">delete</span> real_bear_;
  <span style="color: #00ffff;">delete</span> drinker_;
}

<span style="color: #98fb98;">void</span> <span style="color: #7fffd4;">ProxyBear</span>::<span style="color: #87cefa;">drink</span>() {
  <span style="color: #00ffff;">if</span> (drinker_-&gt;age() &lt; kDrinkAge) {
    cout &lt;&lt; <span style="color: #ffa07a;">"Sorry the drinker is too young to drink"</span> &lt;&lt; endl;
  } <span style="color: #00ffff;">else</span> {
    real_bear_-&gt;drink();
  }
}
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 总结</h2>
<div class="outline-text-2" id="text-3">
</div><div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> 代理模式(Proxy)结构</h3>
<div class="outline-text-3" id="text-3-1">
<img src="/images/blog/2014/proxy/proxy_structure.jpeg">
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> 组成</h3>
<div class="outline-text-3" id="text-3-2">
<ul class="org-ul">
<li>代理类（Proxy）
<ol class="org-ol">
<li>保存一个实际主体的引用让代理可以访问它。代理也可以引用主体（Subject）如果实际主体（RealSubject）和主体（Subject）的接口是一样的。
</li>
<li>提供一个与主体（Subjuect）一致的接口，那么代理类就能替代成实际主体。
</li>
<li>控制对实际主体的访问，并且可以负责实际主体的创建或删除。
</li>
<li>其他职责依赖于代理的类型：
<ul class="org-ul">
<li>远程代理（remote proxies）负责加密一个请求和它的参数，并把它发送给在不同地址空间的实际主体。
</li>
<li>虚拟代理（virtual proxies）可以缓存实际主体的附加信息，以便延迟对它的访问。
</li>
<li>保护代理（protection proxies）检查调用者是否有访问权限来进行一个请求。
</li>
</ul>
</li>
</ol>
</li>
<li>主体（Subject）为实际主体（RealSubject）和代理（Proxy）定义共同的接口，这样一个代理能被用在任何实际主体希望被使用的地方。
</li>
<li>实际主体（RealSubject）定义代理表示的实际对象。
</li>
</ul>
</div>
</div>
<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3"><span class="section-number-3">3.3</span> 应用场景</h3>
<div class="outline-text-3" id="text-3-3">
<p>
代理非常适用，当需要相较于简单指针更通用或更复杂的对一个对象的引用时。下面是一些代理模式适用的常见情况：
</p>
<ol class="org-ol">
<li>一个远程代理为一个在不同地址空间的对象提供本地的表示。
</li>
<li>一个虚拟代理按需创建一个开销大的对象。
</li>
<li>一个保护代理控制对原对象的访问。保护代理非常实用当对象需要不同的访问权限。
</li>
<li>智能指引（smart reference）用来取代简单的指针指引，并执行附加操作当访问时。
</li>
</ol>
</div>
</div>
</div>
]]></content>
  </entry>
  
</feed>
