<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Mediator | (learn&think)]]></title>
  <link href="http://dreamrunner.org/tags/mediator/atom.xml" rel="self"/>
  <link href="http://dreamrunner.org/"/>
  <updated>2014-06-10T20:19:19+08:00</updated>
  <id>http://dreamrunner.org/</id>
  <author>
    <name><![CDATA[DreamRunner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[浅谈设计模式二十一: 中介者模式(Mediator)]]></title>
    <link href="http://dreamrunner.org/blog/2014/05/04/%E6%B5%85%E8%B0%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F21/"/>
    <updated>2014-05-04T00:00:00+08:00</updated>
    <id>http://dreamrunner.org/blog/2014/05/04/浅谈设计模式21</id>
    <content type="html"><![CDATA[<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 实例</h2>
<div class="outline-text-2" id="text-1">
<p>
在公司里，有不同的职位，比如销售人员，开发人员，系统维护人员，主管等等，经常不同的人会发出不同广播消息，比如主管通知大家会议室在何时被占用，系统维护人员通知大家系统将升级win7,因为xp将不再得到维护。并且公司内有不同类型的广播消息，比如公司销售会议只应该通知主管级别的人物。
</p>

<p>
有不同类型的广播消息，不同职位接收和发送不同类型的消息给相应职位的人，整个公司的交互相对复杂，如何做到以下呢？
</p>
<ol class="org-ol">
<li>理清和维护好现有的人员交互;
</li>
<li>灵活的扩展不同类型广播和不同消息群组。
</li>
</ol>

<!-- more -->
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 中介者模式(Mediator)</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1"><span class="section-number-3">2.1</span> 目的</h3>
<div class="outline-text-3" id="text-2-1">
<p>
定义一个对象来封装一组对象如何交互。中介者模式使各个对象不显示的互相引用，并让你独立的改变它们的交互，从而达到提高松耦合的效果。
</p>
</div>
</div>

<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2"><span class="section-number-3">2.2</span> 实现</h3>
<div class="outline-text-3" id="text-2-2">
<p>
引入中介者模式集中式控制。由中介者模式来减少交互的复杂度，由它集中理清交互的关系。<a href="https://github.com/shishougang/DesignPattern-CPP/tree/master/src/mediator">代码实例在这里</a>。
</p>
</div>
<div id="outline-container-sec-2-2-1" class="outline-4">
<h4 id="sec-2-2-1"><span class="section-number-4">2.2.1</span> 中介者类</h4>
<div class="outline-text-4" id="text-2-2-1">
<p>
中介者类实现同事间的消息广播：
</p>
<ol class="org-ol">
<li>模板类提供不同类型消息的复用;
</li>
<li>提供同事的注册和脱离不同消息的广播群组： <code>RegisterColleague</code> 和
   <code>UnregisterColleague</code> ;
</li>
<li>发送消息广播事件： <code>FireEvent</code> ;
</li>
<li>用 <code>vector</code> 维护一个同事消息队列来对注册入队列的同事发生广播事件。
</li>
</ol>

<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00ffff;">template</span>&lt;<span style="color: #00ffff;">typename</span> <span style="color: #98fb98;">EventArgType</span>&gt;
<span style="color: #00ffff;">class</span> <span style="color: #98fb98;">Mediator</span> {
 <span style="color: #00ffff;">public</span>:
  <span style="color: #00ffff;">typedef</span> <span style="color: #98fb98;">vector</span>&lt;<span style="color: #98fb98;">ColleagueEvent</span>&lt;<span style="color: #98fb98;">EventArgType</span>&gt;* &gt; <span style="color: #98fb98;">EventList</span>;
  <span style="color: #00ffff;">virtual</span> ~<span style="color: #87cefa;">Mediator</span>() {}

 <span style="color: #00ffff;">private</span>:
  <span style="color: #98fb98;">EventList</span> <span style="color: #eedd82;">colleagues</span>;
  <span style="color: #00ffff;">static</span> <span style="color: #98fb98;">Mediator</span>&lt;<span style="color: #98fb98;">EventArgType</span>&gt; *<span style="color: #eedd82;">instance</span>;
  <span style="color: #00ffff;">static</span> <span style="color: #98fb98;">Mediator</span>&lt;<span style="color: #98fb98;">EventArgType</span>&gt;&amp; <span style="color: #87cefa;">GetInstance</span>() {
    <span style="color: #00ffff;">if</span> (!instance) {
      instance = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">Mediator</span>();
    }
    <span style="color: #00ffff;">return</span> *instance;
  }
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">RegisterColleague</span>(<span style="color: #98fb98;">ColleagueEvent</span>&lt;<span style="color: #98fb98;">EventArgType</span>&gt; *<span style="color: #eedd82;">col_event</span>) {
    colleagues.push_back(col_event);
  }
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">FireEvent</span>(<span style="color: #98fb98;">ColleagueEvent</span>&lt;<span style="color: #98fb98;">EventArgType</span>&gt; *<span style="color: #eedd82;">source</span>, <span style="color: #98fb98;">EventArgType</span> <span style="color: #eedd82;">event_arg</span>) {
    <span style="color: #00ffff;">for</span> (<span style="color: #98fb98;">unsigned</span> <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">i</span> = 0; i &lt; colleagues.size(); ++i) {
      <span style="color: #00ffff;">if</span> (colleagues[i] != source) {
        colleagues[i]-&gt;handlerProc(source-&gt;event_context, event_arg,
                                   <span style="color: #98fb98;">colleagues</span>[i]-&gt;event_context);
      }
    }
  }
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">UnregisterColleague</span>(<span style="color: #98fb98;">ColleagueEvent</span>&lt;<span style="color: #98fb98;">EventArgType</span>&gt; *<span style="color: #eedd82;">col_event</span>) {
    <span style="color: #00ffff;">typename</span> <span style="color: #7fffd4;">EventList</span>::<span style="color: #98fb98;">iterator</span> <span style="color: #eedd82;">it</span> = find(colleagues.begin(), colleagues.end(),
                                  col_event);
    <span style="color: #00ffff;">if</span> (it != colleagues.end()) {
      colleagues.erase(it);
    }
  }
  <span style="color: #00ffff;">friend</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">ColleagueEvent</span>&lt;<span style="color: #98fb98;">EventArgType</span>&gt;;
};
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-2-2-2" class="outline-4">
<h4 id="sec-2-2-2"><span class="section-number-4">2.2.2</span> 同事消息事件类</h4>
<div class="outline-text-4" id="text-2-2-2">
<p>
同事消息事件类封装消息事件：
</p>
<ol class="org-ol">
<li>模板类提供不同类型消息的复用;
</li>
<li>消息的注册同事;
</li>
<li>消息的处理函数，不同同事实现各自的处理函数，当由消息到来时，中介者类调用各个同事的消息处理函数来操作;
</li>
<li>用中介者类注册和脱离消息群组;
</li>
<li>用中介着类出发消息事件;
</li>
</ol>

<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00ffff;">template</span>&lt;<span style="color: #00ffff;">typename</span> <span style="color: #98fb98;">EventArgType</span>&gt;
<span style="color: #00ffff;">class</span> <span style="color: #98fb98;">ColleagueEvent</span> {
 <span style="color: #00ffff;">public</span>:
  <span style="color: #00ffff;">typedef</span> <span style="color: #98fb98;">void</span> (*<span style="color: #98fb98;">ColleagueEventHandler</span>) (<span style="color: #98fb98;">Colleague</span> *<span style="color: #eedd82;">source</span>,
                                         <span style="color: #98fb98;">EventArgType</span> <span style="color: #eedd82;">event_arg</span>,
                                         <span style="color: #98fb98;">Colleague</span> *<span style="color: #eedd82;">context</span>);
  <span style="color: #87cefa;">ColleagueEvent</span>(<span style="color: #98fb98;">Colleague</span> *<span style="color: #eedd82;">source</span>, <span style="color: #98fb98;">ColleagueEventHandler</span> <span style="color: #eedd82;">event_proc</span>)
      : event_context(source), <span style="color: #98fb98;">handlerProc</span>(<span style="color: #eedd82;">event_proc</span>) {
    <span style="color: #7fffd4;">Mediator</span>&lt;<span style="color: #98fb98;">EventArgType</span>&gt;::GetInstance().RegisterColleague(<span style="color: #00ffff;">this</span>);
  }
  <span style="color: #00ffff;">virtual</span> ~<span style="color: #87cefa;">ColleagueEvent</span>() {
    <span style="color: #7fffd4;">Mediator</span>&lt;<span style="color: #98fb98;">EventArgType</span>&gt;::GetInstance().UnregisterColleague(<span style="color: #00ffff;">this</span>);
  }
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">FireEvent</span>(<span style="color: #98fb98;">EventArgType</span> <span style="color: #eedd82;">event_arg</span>) {
    <span style="color: #7fffd4;">Mediator</span>&lt;<span style="color: #98fb98;">EventArgType</span>&gt;::GetInstance().FireEvent(<span style="color: #00ffff;">this</span>, event_arg);
  }
 <span style="color: #00ffff;">private</span>:
  <span style="color: #98fb98;">Colleague</span> *<span style="color: #eedd82;">event_context</span>;
  <span style="color: #98fb98;">ColleagueEventHandler</span> <span style="color: #eedd82;">handlerProc</span>;
  <span style="color: #00ffff;">friend</span> <span style="color: #00ffff;">class</span> <span style="color: #98fb98;">Mediator</span>&lt;<span style="color: #98fb98;">EventArgType</span>&gt;;
};
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2-2-3" class="outline-4">
<h4 id="sec-2-2-3"><span class="section-number-4">2.2.3</span> 公司人员抽象类</h4>
<div class="outline-text-4" id="text-2-2-3">
<p>
为同事定义接口。暂时是空的。
</p>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00ffff;">class</span> <span style="color: #98fb98;">Colleague</span> {
 <span style="color: #00ffff;">protected</span>:
  <span style="color: #87cefa;">Colleague</span>() {}
  <span style="color: #00ffff;">virtual</span> ~<span style="color: #87cefa;">Colleague</span>() {}
};
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2-2-4" class="outline-4">
<h4 id="sec-2-2-4"><span class="section-number-4">2.2.4</span> 普通员工消息类型类</h4>
<div class="outline-text-4" id="text-2-2-4">
<p>
消息有很多不同类型，如普通员工消息类型，主管级消息等等，这里以普通员工消息为例。
</p>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00ffff;">class</span> <span style="color: #98fb98;">StaffMsg</span> {
 <span style="color: #00ffff;">public</span>:
  <span style="color: #87cefa;">StaffMsg</span>(<span style="color: #98fb98;">string</span> <span style="color: #eedd82;">name</span>, <span style="color: #98fb98;">string</span> <span style="color: #eedd82;">data</span>) : msg_name_(name), <span style="color: #98fb98;">msg_data_</span>(<span style="color: #eedd82;">data</span>) {
  }
  <span style="color: #00ffff;">virtual</span> ~<span style="color: #87cefa;">StaffMsg</span>() {}
  <span style="color: #98fb98;">string</span> <span style="color: #87cefa;">msg_name</span>() {<span style="color: #00ffff;">return</span> msg_name_;}
  <span style="color: #98fb98;">string</span> <span style="color: #87cefa;">msg_data</span>() {<span style="color: #00ffff;">return</span> msg_data_;}
 <span style="color: #00ffff;">private</span>:
  <span style="color: #98fb98;">string</span> <span style="color: #eedd82;">msg_name_</span>;
  <span style="color: #98fb98;">string</span> <span style="color: #eedd82;">msg_data_</span>;
};
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2-2-5" class="outline-4">
<h4 id="sec-2-2-5"><span class="section-number-4">2.2.5</span> 雇员基类</h4>
<div class="outline-text-4" id="text-2-2-5">
<p>
有雇主和雇员之分，这里以雇员为例。
</p>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00ffff;">class</span> <span style="color: #98fb98;">Employee</span> : <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">Colleague</span> {
 <span style="color: #00ffff;">public</span>:
  <span style="color: #87cefa;">Employee</span>(<span style="color: #98fb98;">string</span> <span style="color: #eedd82;">title</span>, <span style="color: #98fb98;">string</span> <span style="color: #eedd82;">name</span>) : title_(title), name_(name) {
  }
  <span style="color: #00ffff;">virtual</span> ~<span style="color: #87cefa;">Employee</span>() {}
  <span style="color: #98fb98;">string</span> <span style="color: #87cefa;">title</span>() {<span style="color: #00ffff;">return</span> title_;}
  <span style="color: #98fb98;">string</span> <span style="color: #87cefa;">name</span>() {<span style="color: #00ffff;">return</span> name_;}
 <span style="color: #00ffff;">protected</span>:
  <span style="color: #98fb98;">string</span> <span style="color: #eedd82;">title_</span>;
  <span style="color: #98fb98;">string</span> <span style="color: #eedd82;">name_</span>;
};
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2-2-6" class="outline-4">
<h4 id="sec-2-2-6"><span class="section-number-4">2.2.6</span> 普通员工类</h4>
<div class="outline-text-4" id="text-2-2-6">
<p>
普通员工基于雇员类。维护普通员工消息事件实例，负责把自己注册到相应的中介者消息队列，实现普通员工如何处理接收到的消息。
</p>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00ffff;">class</span> <span style="color: #98fb98;">GeneralStaff</span> : <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">Employee</span> {
 <span style="color: #00ffff;">public</span>:
  <span style="color: #87cefa;">GeneralStaff</span>(<span style="color: #98fb98;">string</span> <span style="color: #eedd82;">title</span>, <span style="color: #98fb98;">string</span> <span style="color: #eedd82;">name</span>);
  <span style="color: #00ffff;">virtual</span> ~<span style="color: #87cefa;">GeneralStaff</span>();
  <span style="color: #00ffff;">static</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">OnColleagueEvent</span>(<span style="color: #98fb98;">Colleague</span> *<span style="color: #eedd82;">source</span>, <span style="color: #98fb98;">StaffMsg</span> <span style="color: #eedd82;">data</span>,
                               <span style="color: #98fb98;">Colleague</span>* <span style="color: #eedd82;">context</span>);
 <span style="color: #00ffff;">protected</span>:
  <span style="color: #98fb98;">ColleagueEvent</span>&lt;<span style="color: #98fb98;">StaffMsg</span>&gt; <span style="color: #eedd82;">general_staff_event_</span>;
};

<span style="color: #7fffd4;">GeneralStaff</span>::<span style="color: #87cefa;">GeneralStaff</span>(<span style="color: #98fb98;">string</span> <span style="color: #eedd82;">title</span>, <span style="color: #98fb98;">string</span> <span style="color: #eedd82;">name</span>)
    : Employee(title, name), general_staff_event_(<span style="color: #00ffff;">this</span>, OnColleagueEvent) {
}

<span style="color: #98fb98;">void</span> <span style="color: #7fffd4;">GeneralStaff</span>::<span style="color: #87cefa;">OnColleagueEvent</span>(<span style="color: #98fb98;">Colleague</span> *<span style="color: #eedd82;">source</span>, <span style="color: #98fb98;">StaffMsg</span> <span style="color: #eedd82;">data</span>,
                                           <span style="color: #98fb98;">Colleague</span>* <span style="color: #eedd82;">context</span>) {
  <span style="color: #98fb98;">Employee</span> *<span style="color: #eedd82;">src_colleague</span> = <span style="color: #00ffff;">static_cast</span>&lt;Employee *&gt; (source);
  <span style="color: #98fb98;">Employee</span> *<span style="color: #eedd82;">ctx_colleague</span> = <span style="color: #00ffff;">static_cast</span>&lt;Employee *&gt; (context);
  cout &lt;&lt; endl &lt;&lt; ctx_colleague-&gt;title()
       &lt;&lt; <span style="color: #ffa07a;">" - "</span> &lt;&lt; ctx_colleague-&gt;name()
       &lt;&lt; <span style="color: #ffa07a;">" is notified by "</span>
       &lt;&lt; src_colleague-&gt;title() &lt;&lt; <span style="color: #ffa07a;">" - "</span>
       &lt;&lt; src_colleague-&gt;name()
       &lt;&lt; <span style="color: #ffa07a;">" of STAFF Event "</span> &lt;&lt; data.msg_name()
       &lt;&lt; <span style="color: #ffa07a;">" with "</span> &lt;&lt; data.msg_data();
}
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2-2-7" class="outline-4">
<h4 id="sec-2-2-7"><span class="section-number-4">2.2.7</span> 销售人员类</h4>
<div class="outline-text-4" id="text-2-2-7">
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00ffff;">class</span> <span style="color: #98fb98;">SalesMen</span> : <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">GeneralStaff</span> {
 <span style="color: #00ffff;">public</span>:
  <span style="color: #00ffff;">explicit</span> <span style="color: #87cefa;">SalesMen</span>(<span style="color: #98fb98;">string</span> <span style="color: #eedd82;">name</span>) :
      GeneralStaff(<span style="color: #ffa07a;">"Sales Man"</span>, name) {
  }
  <span style="color: #00ffff;">virtual</span> ~<span style="color: #87cefa;">SalesMen</span>() {}
};
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-2-2-8" class="outline-4">
<h4 id="sec-2-2-8"><span class="section-number-4">2.2.8</span> 系统维护人员类</h4>
<div class="outline-text-4" id="text-2-2-8">
<p>
系统维护人员类注册普通员工消息队列，并有发起软件升级通知的权利。
</p>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00ffff;">class</span> <span style="color: #98fb98;">SysAdmin</span> : <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">GeneralStaff</span> {
 <span style="color: #00ffff;">public</span>:
  <span style="color: #00ffff;">explicit</span> <span style="color: #87cefa;">SysAdmin</span>(<span style="color: #98fb98;">string</span> <span style="color: #eedd82;">name</span>);
  <span style="color: #00ffff;">virtual</span> ~<span style="color: #87cefa;">SysAdmin</span>();
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">AdviceForSoftwareUpdate</span>(<span style="color: #98fb98;">string</span> <span style="color: #eedd82;">sw_name</span>);
};

<span style="color: #7fffd4;">SysAdmin</span>::<span style="color: #87cefa;">SysAdmin</span>(<span style="color: #98fb98;">string</span> <span style="color: #eedd82;">name</span>) : GeneralStaff(<span style="color: #ffa07a;">"Sys Admin"</span>, name) {
}

<span style="color: #98fb98;">void</span> <span style="color: #7fffd4;">SysAdmin</span>::<span style="color: #87cefa;">AdviceForSoftwareUpdate</span>(<span style="color: #98fb98;">string</span> <span style="color: #eedd82;">sw_name</span>) {
  general_staff_event_.FireEvent(StaffMsg(<span style="color: #ffa07a;">"Software Update Advice"</span>, sw_name));
}
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-2-2-9" class="outline-4">
<h4 id="sec-2-2-9"><span class="section-number-4">2.2.9</span> 主管人员类</h4>
<div class="outline-text-4" id="text-2-2-9">
<p>
系统维护人员类注册普通员工消息队列，并有发起预订会议室通知的权利。
</p>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00ffff;">class</span> <span style="color: #98fb98;">Manager</span> : <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">GeneralStaff</span> {
 <span style="color: #00ffff;">public</span>:
  <span style="color: #00ffff;">explicit</span> <span style="color: #87cefa;">Manager</span>(<span style="color: #98fb98;">string</span> <span style="color: #eedd82;">name</span>);
  <span style="color: #00ffff;">virtual</span> ~<span style="color: #87cefa;">Manager</span>();
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">BookMeetingRoom</span>(<span style="color: #98fb98;">string</span> <span style="color: #eedd82;">meeting_room_name</span>);
};

<span style="color: #7fffd4;">Manager</span>::<span style="color: #87cefa;">Manager</span>(<span style="color: #98fb98;">string</span> <span style="color: #eedd82;">name</span>) : GeneralStaff(<span style="color: #ffa07a;">"Manager"</span>, name) {
}

<span style="color: #98fb98;">void</span> <span style="color: #7fffd4;">Manager</span>::<span style="color: #87cefa;">BookMeetingRoom</span>(<span style="color: #98fb98;">string</span> <span style="color: #eedd82;">meeting_room_name</span>) {
  general_staff_event_.FireEvent(StaffMsg(<span style="color: #ffa07a;">"Meeting Room Booking"</span>,
                                          meeting_room_name));
}
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-2-2-10" class="outline-4">
<h4 id="sec-2-2-10"><span class="section-number-4">2.2.10</span> 总的测试</h4>
<div class="outline-text-4" id="text-2-2-10">
<ol class="org-ol">
<li>建立各个员工;
</li>
<li>发起不同类型消息测试。
</li>
</ol>

<div class="org-src-container">

<pre class="src src-c++"><span style="color: #98fb98;">int</span> <span style="color: #87cefa;">main</span>(<span style="color: #98fb98;">int</span> <span style="color: #eedd82;">argc</span>, <span style="color: #98fb98;">char</span> *<span style="color: #eedd82;">argv</span>[]) {
  <span style="color: #98fb98;">Manager</span> <span style="color: #eedd82;">mng1</span>(<span style="color: #ffa07a;">"Vivek"</span>), <span style="color: #eedd82;">mng2</span>(<span style="color: #ffa07a;">"Pradeep"</span>);
  <span style="color: #98fb98;">SysAdmin</span> <span style="color: #eedd82;">sys_admin</span>(<span style="color: #ffa07a;">"Sony"</span>);
  <span style="color: #98fb98;">SalesMen</span> <span style="color: #eedd82;">sl1</span>(<span style="color: #ffa07a;">"Dave"</span>), <span style="color: #eedd82;">s12</span>(<span style="color: #ffa07a;">"Mike"</span>), <span style="color: #eedd82;">s13</span>(<span style="color: #ffa07a;">"Allen"</span>);

  mng1.BookMeetingRoom(<span style="color: #ffa07a;">"Big Room"</span>);
  cout &lt;&lt; endl;
  sys_admin.AdviceForSoftwareUpdate(<span style="color: #ffa07a;">"Win7"</span>);
  cout &lt;&lt; endl;
  <span style="color: #00ffff;">return</span> 0;
}
</pre>
</div>

<p>
结果：
</p>
<div class="org-src-container">

<pre class="src src-c++">Manager - Pradeep is notified by Manager - Vivek of STAFF Event Meeting Room Booking with Big Room
Sys Admin - Sony is notified by Manager - Vivek of STAFF Event Meeting Room Booking with Big Room
Sales Man - Dave is notified by Manager - Vivek of STAFF Event Meeting Room Booking with Big Room
Sales Man - Mike is notified by Manager - Vivek of STAFF Event Meeting Room Booking with Big Room
Sales Man - Allen is notified by Manager - Vivek of STAFF Event Meeting Room Booking with Big Room

Manager - Vivek is notified by Sys Admin - Sony of STAFF Event Software Update Advice with Win7
Manager - Pradeep is notified by Sys Admin - Sony of STAFF Event Software Update Advice with Win7
Sales Man - Dave is notified by Sys Admin - Sony of STAFF Event Software Update Advice with Win7
Sales Man - Mike is notified by Sys Admin - Sony of STAFF Event Software Update Advice with Win7
Sales Man - Allen is notified by Sys Admin - Sony of STAFF Event Software Update Advice with Win7
</pre>
</div>
</div>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 总结</h2>
<div class="outline-text-2" id="text-3">
</div><div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> 中介者模式(Mediator)结构</h3>
<div class="outline-text-3" id="text-3-1">
<img src="/images/blog/2014/mediator/mediator_structure.jpeg">
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> 组成</h3>
<div class="outline-text-3" id="text-3-2">
<ul class="org-ul">
<li>抽象中介者（Mediator）为与同事（Colleague）对象交流定义一个接口。
</li>
<li>具体中介者（ConcreteMediator）
<ol class="org-ol">
<li>实现与同事（Colleague）对象协作的合作行为。
</li>
<li>知道和维护它的同事类。
</li>
</ol>
</li>
<li>同事类（Colleague classes）
<ol class="org-ol">
<li>每个同事类知道它的中介者对象。
</li>
<li>每个同事类任何它应该时与它的中介者交流，否则就与其他同事类交流。
</li>
</ol>
</li>
</ul>
</div>
</div>
<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3"><span class="section-number-3">3.3</span> 应用场景</h3>
<div class="outline-text-3" id="text-3-3">
<ul class="org-ul">
<li>一组对象交流在很好定义的却复杂的方式上。导致的互相依赖性并没有好的组织而且难理解时。
</li>
<li>复用一个对象是困难的，因为它引用并交流与许多其他对象。
</li>
<li>分布在很多类中的一个行为需要被定制但不能进行太多子类化。
</li>
</ul>
</div>
</div>
<div id="outline-container-sec-3-4" class="outline-3">
<h3 id="sec-3-4"><span class="section-number-3">3.4</span> 缺点</h3>
<div class="outline-text-3" id="text-3-4">
<p>
中介者模式集中式控制。中介者模式以减少交互的复杂度而增加中介者的复杂度。因为一个中介者类封装了协议，它会变得比任何同事类都复杂。这会导致中介者类自身是个难维护的庞然大物。
</p>
</div>
</div>
</div>
]]></content>
  </entry>
  
</feed>
