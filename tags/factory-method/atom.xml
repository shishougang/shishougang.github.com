<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Factory Method | (learn&think)]]></title>
  <link href="http://shishougang.github.com/tags/factory-method/atom.xml" rel="self"/>
  <link href="http://shishougang.github.com/"/>
  <updated>2014-05-14T23:48:48+08:00</updated>
  <id>http://shishougang.github.com/</id>
  <author>
    <name><![CDATA[DreamRunner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[浅谈设计模式四: 工厂模式(Factory Method)]]></title>
    <link href="http://shishougang.github.com/blog/2014/05/03/%E6%B5%85%E8%B0%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F4/"/>
    <updated>2014-05-03T00:00:00+08:00</updated>
    <id>http://shishougang.github.com/blog/2014/05/03/浅谈设计模式4</id>
    <content type="html"><![CDATA[<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 实例</h2>
<div class="outline-text-2" id="text-1">
<p>
批萨店有各种不同的批萨，根据不同的用户来点批萨，基本实现如下：
</p>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #98fb98;">Pizza</span>* <span style="color: #87cefa;">orderPizza</span>(<span style="color: #98fb98;">string</span> <span style="color: #eedd82;">type</span>) {
  <span style="color: #98fb98;">Pizza</span> <span style="color: #eedd82;">pizza</span> = <span style="color: #7fffd4;">NULL</span>;
  <span style="color: #00ffff;">if</span> (type == <span style="color: #ffa07a;">"cheese"</span>) {
    pizza = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">CheesePizza</span>();
  } <span style="color: #00ffff;">else</span> <span style="color: #00ffff;">if</span> (type == <span style="color: #ffa07a;">"pepperoni"</span>) {
    pizza = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">PepperoniPizza</span>();
  } <span style="color: #00ffff;">else</span> <span style="color: #00ffff;">if</span> (type == <span style="color: #ffa07a;">"clam"</span>) {
    pizza = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">ClamPizza</span>();
  } <span style="color: #00ffff;">else</span> <span style="color: #00ffff;">if</span> (type == <span style="color: #ffa07a;">"veggie"</span>) {
    pizza = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">VeggiePizza</span>();
  }
  pizza-&gt;prepare();
  pizza-&gt;bake();
  pizza-&gt;cut();
  pizza-&gt;box();
  <span style="color: #00ffff;">return</span> pizza;
}
</pre>
</div>

<p>
但是如果批萨店新添或下架其它的品种的批萨呢？就需要在这个函数里添加或删除不同的批萨，而这段代码包括变化的批萨品种，和不变的批萨制作过程。不易后期维护。
</p>

<!-- more -->
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 工厂模式(Factory Method)</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1"><span class="section-number-3">2.1</span> 目的</h3>
<div class="outline-text-3" id="text-2-1">
<p>
定义创建对象的一个接口，但是让子类来决定实例哪个类。工厂模式(Factory
Method)让一个类能推迟它的实例花给子类。<a href="https://github.com/shishougang/DesignPattern-CPP/tree/master/src/factory_method">代码实例在这里</a>。
</p>

<p>
工厂模式(Factory Method)可以分为：
</p>
<ol class="org-ol">
<li>简单工厂模式（Simple Factory)
</li>
<li>工厂模式(Factory Method)
</li>
</ol>
</div>
</div>
<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2"><span class="section-number-3">2.2</span> 实现1. 简单工厂模式（Simple Factory)</h3>
<div class="outline-text-3" id="text-2-2">
</div><div id="outline-container-sec-2-2-1" class="outline-4">
<h4 id="sec-2-2-1"><span class="section-number-4">2.2.1</span> 把实例化批萨变化部分抽离到一个工厂类里</h4>
<div class="outline-text-4" id="text-2-2-1">
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #98fb98;">Pizza</span>* <span style="color: #7fffd4;">SimplePizzaFactory</span>::<span style="color: #87cefa;">createPizza</span>(<span style="color: #98fb98;">string</span> <span style="color: #eedd82;">type</span>) {
  <span style="color: #98fb98;">Pizza</span>* <span style="color: #eedd82;">pizza</span> = <span style="color: #7fffd4;">NULL</span>;
  <span style="color: #00ffff;">if</span> (type == <span style="color: #ffa07a;">"cheese"</span>) {
    pizza = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">CheesePizza</span>();
  } <span style="color: #00ffff;">else</span> <span style="color: #00ffff;">if</span> (type == <span style="color: #ffa07a;">"pepperoni"</span>) {
    pizza = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">PepperoniPizza</span>();
  } <span style="color: #00ffff;">else</span> <span style="color: #00ffff;">if</span> (type == <span style="color: #ffa07a;">"clam"</span>) {
    pizza = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">ClamPizza</span>();
  } <span style="color: #00ffff;">else</span> <span style="color: #00ffff;">if</span> (type == <span style="color: #ffa07a;">"veggie"</span>) {
    pizza = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">VeggiePizza</span>();
  }
  <span style="color: #00ffff;">return</span> pizza;
}
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2-2-2" class="outline-4">
<h4 id="sec-2-2-2"><span class="section-number-4">2.2.2</span> 在点批萨里调用这个工厂类方法</h4>
<div class="outline-text-4" id="text-2-2-2">
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #98fb98;">Pizza</span>* <span style="color: #7fffd4;">PizzaStore</span>::<span style="color: #87cefa;">orderPizza</span>(<span style="color: #98fb98;">string</span> <span style="color: #eedd82;">type</span>) {
  <span style="color: #98fb98;">Pizza</span> *<span style="color: #eedd82;">pizza</span>;
  pizza = factory_-&gt;createPizza(type);

  pizza-&gt;prepare();
  pizza-&gt;bake();
  pizza-&gt;cut();
  pizza-&gt;box();
  <span style="color: #00ffff;">return</span> pizza;
}
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2-2-3" class="outline-4">
<h4 id="sec-2-2-3"><span class="section-number-4">2.2.3</span> 总的框架</h4>
<div class="outline-text-4" id="text-2-2-3">
<img src="/images/blog/2014/factoryMethod/simplefactory.jpeg">
</div>
</div>
</div>

<div id="outline-container-sec-2-3" class="outline-3">
<h3 id="sec-2-3"><span class="section-number-3">2.3</span> 实现2. 工厂模式（Factory Method)</h3>
<div class="outline-text-3" id="text-2-3">
</div><div id="outline-container-sec-2-3-1" class="outline-4">
<h4 id="sec-2-3-1"><span class="section-number-4">2.3.1</span> 在批萨店接口里定义工厂方法</h4>
<div class="outline-text-4" id="text-2-3-1">
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00ffff;">class</span> <span style="color: #98fb98;">PizzaStore</span> {
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">Pizza</span>* <span style="color: #87cefa;">createPizza</span>(<span style="color: #98fb98;">string</span> <span style="color: #eedd82;">item</span>) = 0;
};
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2-3-2" class="outline-4">
<h4 id="sec-2-3-2"><span class="section-number-4">2.3.2</span> 批萨店各自实现接口里的工厂方法</h4>
<div class="outline-text-4" id="text-2-3-2">
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #98fb98;">Pizza</span>* <span style="color: #7fffd4;">NYPizzaStore</span>::<span style="color: #87cefa;">createPizza</span>(<span style="color: #98fb98;">string</span> <span style="color: #eedd82;">item</span>) {
  <span style="color: #00ffff;">if</span> (item == <span style="color: #ffa07a;">"cheese"</span>) {
    <span style="color: #00ffff;">return</span> <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">NYStyleCheesePizza</span>();
  } <span style="color: #00ffff;">else</span> <span style="color: #00ffff;">if</span> (item == <span style="color: #ffa07a;">"clam"</span>) {
    <span style="color: #00ffff;">return</span> <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">NYStyleClamPizza</span>();
  } <span style="color: #00ffff;">else</span> <span style="color: #00ffff;">if</span> (item == <span style="color: #ffa07a;">"pepperoni"</span>) {
    <span style="color: #00ffff;">return</span> <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">NYStylePepperoniPizza</span>();
  } <span style="color: #00ffff;">else</span> {
    <span style="color: #00ffff;">return</span> <span style="color: #7fffd4;">NULL</span>;
  }
}
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2-3-3" class="outline-4">
<h4 id="sec-2-3-3"><span class="section-number-4">2.3.3</span> 整合到批萨店基类点餐里</h4>
<div class="outline-text-4" id="text-2-3-3">
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #98fb98;">Pizza</span>* <span style="color: #7fffd4;">PizzaStore</span>::<span style="color: #87cefa;">orderPizza</span>(<span style="color: #98fb98;">string</span> <span style="color: #eedd82;">type</span>) {
  <span style="color: #98fb98;">Pizza</span> *<span style="color: #eedd82;">pizza</span>;
  pizza = createPizza(type);
  cout &lt;&lt; <span style="color: #ffa07a;">"--- Making a "</span> + pizza-&gt;name() + <span style="color: #ffa07a;">" ---"</span> &lt;&lt; endl;
  pizza-&gt;prepare();
  pizza-&gt;bake();
  pizza-&gt;cut();
  pizza-&gt;box();
  <span style="color: #00ffff;">return</span> pizza;
}
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2-3-4" class="outline-4">
<h4 id="sec-2-3-4"><span class="section-number-4">2.3.4</span> 整的框架</h4>
<div class="outline-text-4" id="text-2-3-4">
<img src="/images/blog/2014/factoryMethod/factorymethod.jpeg">
</div>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 总结</h2>
<div class="outline-text-2" id="text-3">
</div><div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> 工厂模式(Factory Method)结构</h3>
<div class="outline-text-3" id="text-3-1">
<img src="/images/blog/2014/factoryMethod/factorymethod_structure.jpeg">
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> 组成</h3>
<div class="outline-text-3" id="text-3-2">
<ul class="org-ul">
<li>产品定义工厂模式创建对象的接口。
</li>
<li>具体产品实现产品接口。
</li>
<li>创建者
<ol class="org-ol">
<li>声明返回产品对象工厂模式方法，创建者可能也定义一个默认工厂方法，来返回一个默认的具体产品对象。
</li>
<li>用工厂方法来创建产品对象。
</li>
</ol>
</li>
<li>具体创建者覆盖工厂方法来返回具体产品的实例。
</li>
</ul>
</div>
</div>
<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3"><span class="section-number-3">3.3</span> 应用场景</h3>
<div class="outline-text-3" id="text-3-3">
<ol class="org-ol">
<li>一个类不能预测它必要创建对象的类。
</li>
<li>一个类想要让它的子类来指定它创建的类。
</li>
<li>类委托职能给它许多的帮助子类，然后你想把哪个帮助子类来委任的内容本地化。
</li>
</ol>
</div>
</div>
<div id="outline-container-sec-3-4" class="outline-3">
<h3 id="sec-3-4"><span class="section-number-3">3.4</span> 缺点</h3>
<div class="outline-text-3" id="text-3-4">
<p>
一个潜在的缺点是：那些客户需要成为创建者类（Creator class）的子类来创建一个特殊的具体产品（ConcretePrducit）对象。当客户总要子类化创建者类时，子类化是没有问题的，但相反，客户不需要子类化创建者类时，子类化将使客户不得不处理这一新的变化。
</p>
</div>
</div>
</div>
]]></content>
  </entry>
  
</feed>
