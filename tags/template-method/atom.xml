<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Template method | (learn&think)]]></title>
  <link href="http://shishougang.github.com/tags/template-method/atom.xml" rel="self"/>
  <link href="http://shishougang.github.com/"/>
  <updated>2014-05-14T23:48:48+08:00</updated>
  <id>http://shishougang.github.com/</id>
  <author>
    <name><![CDATA[DreamRunner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[浅谈设计模式十: 模板方法模式(Template method)]]></title>
    <link href="http://shishougang.github.com/blog/2014/05/04/%E6%B5%85%E8%B0%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F10/"/>
    <updated>2014-05-04T00:00:00+08:00</updated>
    <id>http://shishougang.github.com/blog/2014/05/04/浅谈设计模式10</id>
    <content type="html"><![CDATA[<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 实例</h2>
<div class="outline-text-2" id="text-1">
<p>
有些人喜欢喝茶，有些人喜欢喝咖啡，所以现在有咖啡和茶两个类，基本代码如下：
</p>

<p>
<code>Coffee</code> 类：
</p>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00ffff;">class</span> <span style="color: #98fb98;">Coffee</span> {
 <span style="color: #00ffff;">public</span>:
  <span style="color: #00ffff;">virtual</span> ~<span style="color: #87cefa;">Coffee</span>();
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">prepareRecipe</span>();
 <span style="color: #00ffff;">protected</span>:
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">boilWater</span>();
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">brewCoffeeGrinds</span>();
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">pourInCup</span>();
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">addSugarAndMilk</span>();
};
</pre>
</div>

<p>
<code>Tea</code> 类：
</p>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00ffff;">class</span> <span style="color: #98fb98;">Tea</span> {
 <span style="color: #00ffff;">public</span>:
  <span style="color: #00ffff;">virtual</span> ~<span style="color: #87cefa;">Tea</span>();
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">prepareRecipe</span>();
 <span style="color: #00ffff;">protected</span>:
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">boilWater</span>();
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">steepTeaBag</span>();
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">pourInCup</span>();
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">addLemon</span>();
};
</pre>
</div>

<p>
我们发现代码有重复： <code>void boilWater()</code> 和 <code>void pourInCup()</code> 。那么如何整合代码消除重复代码呢？
</p>

<!-- more -->
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 模板方法模式(Template method)</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1"><span class="section-number-3">2.1</span> 目的</h3>
<div class="outline-text-3" id="text-2-1">
<p>
为操作中的算法定义一个构架，把一些步骤延迟到子类来完成。模板方法让子类能不改变算法框架的前提下重定义这算法的一些步骤。
</p>
</div>
</div>

<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2"><span class="section-number-3">2.2</span> 实现</h3>
<div class="outline-text-3" id="text-2-2">
<p>
<a href="https://github.com/shishougang/DesignPattern-CPP/tree/master/src/templatemethod">代码实例在这里</a>。
</p>
</div>
<div id="outline-container-sec-2-2-1" class="outline-4">
<h4 id="sec-2-2-1"><span class="section-number-4">2.2.1</span> 提取不变，抽象变化</h4>
<div class="outline-text-4" id="text-2-2-1">
<p>
提取出不变的地方，在基类类定义并实现，然子类共同拥有，抽象变化地方为抽象接口，延迟到让子类来实现。
</p>

<img src="/images/blog/2014/templatemethod/compare_class.jpeg">

<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00ffff;">class</span> <span style="color: #98fb98;">CaffeineBeverage</span> {
 <span style="color: #00ffff;">public</span>:
  <span style="color: #00ffff;">virtual</span> ~<span style="color: #87cefa;">CaffeineBeverage</span>();
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">prepareRecipe</span>();
 <span style="color: #00ffff;">protected</span>:
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">boilWater</span>();
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">pourInCup</span>();
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">brew</span>() = 0;
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">addCondiments</span>() = 0;
};
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2-2-2" class="outline-4">
<h4 id="sec-2-2-2"><span class="section-number-4">2.2.2</span> <code>Coffee</code> 类实现自己功能</h4>
<div class="outline-text-4" id="text-2-2-2">
<p>
<code>Coffee</code> 类继承基类 <code>CaffeineBeverage</code> ，并实现抽象接口来完成自己的算法功能。
</p>

<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00ffff;">class</span> <span style="color: #98fb98;">Coffee</span> : <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">CaffeineBeverage</span> {
 <span style="color: #00ffff;">public</span>:
  <span style="color: #00ffff;">virtual</span> ~<span style="color: #87cefa;">Coffee</span>();
 <span style="color: #00ffff;">protected</span>:
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">brew</span>();
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">addCondiments</span>();
};

<span style="color: #98fb98;">void</span> <span style="color: #7fffd4;">Coffee</span>::<span style="color: #87cefa;">brew</span>() {
  cout &lt;&lt; <span style="color: #ffa07a;">"Dripping Coffee through filter"</span> &lt;&lt; endl;
}

<span style="color: #98fb98;">void</span> <span style="color: #7fffd4;">Coffee</span>::<span style="color: #87cefa;">addCondiments</span>() {
  cout &lt;&lt; <span style="color: #ffa07a;">"Adding Sugar and Milk"</span> &lt;&lt; endl;
}
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2-2-3" class="outline-4">
<h4 id="sec-2-2-3"><span class="section-number-4">2.2.3</span> <code>Tea</code> 类实现自己功能</h4>
<div class="outline-text-4" id="text-2-2-3">
<p>
<code>Tea</code> 类继承基类 <code>CaffeineBeverage</code> ，并实现抽象接口来完成自己的算法功能。
</p>

<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00ffff;">class</span> <span style="color: #98fb98;">Tea</span> : <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">CaffeineBeverage</span> {
 <span style="color: #00ffff;">public</span>:
  <span style="color: #00ffff;">virtual</span> ~<span style="color: #87cefa;">Tea</span>();
 <span style="color: #00ffff;">protected</span>:
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">brew</span>();
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">addCondiments</span>();
};

<span style="color: #98fb98;">void</span> <span style="color: #7fffd4;">Tea</span>::<span style="color: #87cefa;">brew</span>() {
  cout &lt;&lt; <span style="color: #ffa07a;">"Steeping the tea"</span> &lt;&lt; endl;
}

<span style="color: #98fb98;">void</span> <span style="color: #7fffd4;">Tea</span>::<span style="color: #87cefa;">addCondiments</span>() {
  cout &lt;&lt; <span style="color: #ffa07a;">"Adding Lemon"</span> &lt;&lt; endl;
}
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2-2-4" class="outline-4">
<h4 id="sec-2-2-4"><span class="section-number-4">2.2.4</span> 总的模式设计</h4>
<div class="outline-text-4" id="text-2-2-4">
<img src="/images/blog/2014/templatemethod/template_whole.jpeg">
</div>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 总结</h2>
<div class="outline-text-2" id="text-3">
</div><div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> 模板方法模式(Template method)结构</h3>
<div class="outline-text-3" id="text-3-1">
<img src="/images/blog/2014/templatemethod/template_method_structure.jpg">
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> 组成</h3>
<div class="outline-text-3" id="text-3-2">
<ul class="org-ul">
<li>抽象类（AbstractClass）
<ol class="org-ol">
<li>定义抽象的原语操作，具体子类将重定义它们来实现算法的步骤。
</li>
<li>实现一个模板方法定义一个算法的构架。模板方法调用原语操作和抽象类或其他对象定义的操作。
</li>
</ol>
</li>
<li>具体类（ConcreteClass）实现原语操作来执行算法中子类特有的步骤。
</li>
</ul>
</div>
</div>
<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3"><span class="section-number-3">3.3</span> 应用场景</h3>
<div class="outline-text-3" id="text-3-3">
<ul class="org-ul">
<li>一次性实现一个算法的不变部分，把变化部分留给子类去实现。
</li>
<li>各子类间的共同行为需要被提取并集中到一个共同的类中来避免代码的重复。你首先识别出这些现有代码的不同之处，然后把这些不同之处分离到新的操作中。最后，你用一个模板方法调用这些新操作之一来替代原有那些不同的代码。
</li>
<li>控制子类扩展。你能定义一个只在特定点调用 <code>hook</code> 操作的模板方法，以此只允许子类在这些点扩展。
</li>
</ul>
</div>
</div>
</div>
]]></content>
  </entry>
  
</feed>
