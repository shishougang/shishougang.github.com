<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: gflags | (learn&think)]]></title>
  <link href="http://shishougang.github.com/tags/gflags/atom.xml" rel="self"/>
  <link href="http://shishougang.github.com/"/>
  <updated>2014-05-18T22:46:39+08:00</updated>
  <id>http://shishougang.github.com/</id>
  <author>
    <name><![CDATA[DreamRunner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Gflags 简明使用]]></title>
    <link href="http://shishougang.github.com/blog/2014/03/09/gflags-jian-ming-shi-yong/"/>
    <updated>2014-03-09T11:53:54+08:00</updated>
    <id>http://shishougang.github.com/blog/2014/03/09/gflags-jian-ming-shi-yong</id>
    <content type="html"><![CDATA[<h2 id="section">简介</h2>
<p>Google的gflags是一套命令行参数处理的开源库。比getopt更方便，更功能强大，从C++的库更好的支持C++（如C++的string类型）。包括<a href="https://code.google.com/p/gflags/">C++的版本</a>和<a href="https://code.google.com/p/python-gflags/">python的版本</a>。 这里只针对C++版本，python版本的使用类似。主要内容参考与翻译自官方文档：http://gflags.googlecode.com/svn/trunk/doc/gflags.html</p>

<p>你能从<a href="/downloads/code/2014/cmake_gflags_example.zip">这里下载</a>本文章的源代码工程。</p>

<!-- more -->

<h2 id="example">example源代码</h2>
<p>先看example源代码，然后逐步介绍。</p>

<p>``` c++ example.cc
#include &lt;gflags/gflags.h&gt;</p>

<p>DEFINE_bool(big_menu, true, “Include ‘advanced’ options in the menu listing”);
DEFINE_string(languages, “english,french,german”, “comma-separated list of languages to offer in the ‘lang’ menu”);</p>

<p>int main(int argc, char **argv) {
  google::ParseCommandLineFlags(&amp;argc, &amp;argv, true);</p>

<p>cout « “argc=” « argc « endl;
  if (FLAGS_big_menu) {
    cout « “big menu is ture” « endl;
  } else {
    cout « “big menu is flase” « endl;
  }</p>

<p>cout « “languages=” « FLAGS_languages « endl;
  return 0;
}
```</p>

<h3 id="section-1">运行程序</h3>
<ul>
  <li>直接运行</li>
</ul>

<p><code>bash run
  ➜  bin  ./sample 
  argc=1
  big menu is ture
  languages=english,french,german
</code>
* help命令</p>

<p>``` bash run
  ➜  bin  ./sample –help
  sample: Warning: SetUsageMessage() never called</p>

<p>Flags from /home/shougang/workspace/drive/Google/cmake_cpp_gflags/src/sample.cc:
    -big_menu (Include ‘advanced’ options in the menu listing) type: bool
      default: true
    -languages (comma-separated list of languages to offer in the ‘lang’ menu)
      type: string default: “english,french,german”</p>

<p>Flags from src/gflags.cc:
    -flagfile (load flags from file) type: string default: “”
  ………</p>

<p>➜  bin  ./sample –helpshort 
  sample: Warning: SetUsageMessage() never called</p>

<p>Flags from /home/shougang/workspace/drive/Google/cmake_cpp_gflags/src/sample.cc:
    -big_menu (Include ‘advanced’ options in the menu listing) type: bool
      default: true
    -languages (comma-separated list of languages to offer in the ‘lang’ menu)
      type: string default: “english,french,german”
```</p>

<h2 id="section-2">在程序里定义参数</h2>
<p>### 包含头文件</p>

<p><code>c++ header_file
 #include &lt;gflags/gflags.h&gt;
</code></p>

<h3 id="gflag">利用gflag提供的宏定义参数</h3>
<p>该宏的3个参数分别为命令行参数名，参数默认值，参数的帮助信息。</p>

<p><code>c++ define_flags
DEFINE_bool(big_menu, true, "Include 'advanced' options in the menu listing");
DEFINE_string(languages, "english,french,german", "comma-separated list of languages to offer in the 'lang' menu");
</code>
gflags暂时支持如下参数的类型：</p>

<p><code>sh supported_types
DEFINE_bool: boolean
DEFINE_int32: 32-bit integer
DEFINE_int64: 64-bit integer
DEFINE_uint64: unsigned 64-bit integer
DEFINE_double: double
DEFINE_string: C++ string
</code></p>

<h2 id="section-3">访问参数</h2>

<p>通过FLAGS_name像正常变量一样访问标志参数。在这个程序中，通过
<code>FLAGS_big_menu</code>和<code>FLAGS_languages</code>访问它们。</p>

<h2 id="section-4">不同文件访问参数</h2>

<p>如果想再另外一个不是定义这个参数的文件访问这个参数的话，以参数
<code>FLAGS_big_menu</code>为例，用宏<code>DECLARE_bool(big_menu）</code>来声明引入这个参数。
这个宏相当于做了<code>extern FLAGS_big_menu</code>.</p>

<h2 id="section-5">整合一起，初始化所有参数</h2>

<p>定义号参数后，最后要告诉执行程序去处理命令行传入的参数，使得
<code>FLAGS_*</code>参数们得到正确赋值。</p>

<p>通常就是再<code>main()</code>函数中调用;</p>

<p><code>c++ set_up_flag
google::ParseCommandLineFlags(&amp;argc, &amp;argv, true);
</code>
<code>argc</code>和<code>argv</code>就是main的入口参数，因为这个函数会改变他们的值，所以都是
以指针传入。</p>

<p>第三个参数被称为<code>remove_flags</code>。如果它是<code>true</code>,<code>ParseCommandLineFlags</code>会
从<code>argv</code>中移除标识和它们的参数，相应减少<code>argc</code>的值。然后argv只保留命令
行参数。</p>

<p>相反，<code>remove_flags</code>是<code>false</code>,<code>ParseCommandLineFlags</code>会保留<code>argc</code>不变，
但将会重新调整它们的顺序，使得标识再前面。</p>

<p>Note: <code>./sample --big_menu=false arg1</code>中再<code>big_menu</code>是标识，<code>false</code>是
它的参数，<code>arg1</code>是命令行参数。</p>

<h2 id="section-6">命令行设置参数</h2>
<p>gflags提供多种命令行设置参数。</p>

<p><code>string</code>和<code>int</code>之类，可以用如下方式：</p>

<p><code>bash set_languages
app_containing_foo --languages="chinese,japanese,korean"
app_containing_foo -languages="chinese,japanese,korean"
app_containing_foo --languages "chinese,japanese,korean"
app_containing_foo -languages "chinese,japanese,korean"
</code>
对于<code>boolean</code>的标识来说，用如下方式:</p>

<p><code>bash set_boolean
app_containing_foo --big_menu
app_containing_foo --nobig_menu
app_containing_foo --big_menu=true
app_containing_foo --big_menu=false
</code></p>

<p>和<code>getopt()</code>一样，<code>--</code>将会终止标识的处理。所以在<code>foo -f1 1 -- -f2 2</code>中，
<code>f1</code>被认为是一个标识，但<code>f2</code>不会。</p>

<h2 id="section-7">特殊标识</h2>

<p><code>bash special_flags
--help  显示文件中所有标识的完整帮助信息
--helpfull  和-help一样，
--helpshort  只显示当前执行文件里的标志
--helpxml  以xml凡是打印，方便处理
--version  打印版本信息，由google::SetVersionString()设定
--flagfile  -flagfile=f从文件f中读取命令行参数
...
</code>
具体见：http://gflags.googlecode.com/svn/trunk/doc/gflags.html</p>
]]></content>
  </entry>
  
</feed>
