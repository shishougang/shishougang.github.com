<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Mock | (learn&think)]]></title>
  <link href="http://dreamrunner.org/tags/mock/atom.xml" rel="self"/>
  <link href="http://dreamrunner.org/"/>
  <updated>2014-07-06T19:39:36+08:00</updated>
  <id>http://dreamrunner.org/</id>
  <author>
    <name><![CDATA[DreamRunner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[C++测试驱动开发与单元测试实例]]></title>
    <link href="http://dreamrunner.org/blog/2014/03/08/C%2B%2B%E6%B5%8B%E8%AF%95%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%E4%B8%8E%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%AE%9E%E4%BE%8B/"/>
    <updated>2014-03-08T00:00:00+08:00</updated>
    <id>http://dreamrunner.org/blog/2014/03/08/C++测试驱动开发与单元测试实例</id>
    <content type="html"><![CDATA[<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 测试驱动开发基础</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><span class="section-number-3">1.1</span> 测试驱动开发</h3>
<div class="outline-text-3" id="text-1-1">
<p>
<a href="http://en.wikipedia.org/wiki/Test-driven_development">测试驱动开发(TDD)</a>是一种软件开发流程，依赖于重复如下一小段开发周期：
</p>
<ol class="org-ol">
<li>开发者定义一个初始将失败的自动测试用例，这个用例用来实现需要的改进或新的功能;
</li>
<li>写出最小的代码来通过此测试;
</li>
<li><a href="http://en.wikipedia.org/wiki/Code_refactoring">重构</a>这段新代码来符合规范。
</li>
</ol>

<p>
TDD有它自身的
<a href="http://en.wikipedia.org/wiki/Test-driven_development#Benefits">优点</a>与
<a href="http://en.wikipedia.org/wiki/Test-driven_development#Vulnerabilities">缺点</a>
</p>

<!-- more -->

<p>
TDD的一个周期可以总结如下:<sup><a id="fnr.1" name="fnr.1" class="footref" href="#fn.1">1</a></sup>
</p>
<ol class="org-ol">
<li>快速加一个测试
</li>
<li>运行所有测试，然后发现新测试失败
</li>
<li>修改代码，让新测试通过
</li>
<li>运行所有测试并都通过
</li>
<li>重构代码
</li>
</ol>

<img src="/images/blog/2014/Test-driven_development.PNG" title="'TDD'" >
</div>
</div>
<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2"><span class="section-number-3">1.2</span> 单元测试与其框架</h3>
<div class="outline-text-3" id="text-1-2">
<p>
<a href="http://en.wikipedia.org/wiki/Unit_testing">单元测试(unit testing)</a>是测试一小段独立代码其是否正确的一种方法。
</p>

<p>
单元测试的目标是隔离程序的每个部件并证明这些单个部件是正确的。一个单元测
试提供了代码片断需要满足的严密的规约。因此，单元测试带来了一些益处：
</p>
<ol class="org-ol">
<li>尽早找出问题。在TDD开发中，一般单元测试程序先写与代码。
</li>
<li>适应变更。单元测试允许程序员在未来重构代码时，确保代码依然工作正确。
</li>
<li>简化集成。单元测试消除程序单元的不可靠，适合于自底向上的测试方法。通
过先测试程序部件再测试部件组装，使集成测试变得更加简单。
</li>
<li>文档记录。单元测试提供了系统的一种文档记录。借助于查看单元测试提供
的功能和单元测试中如何使用程序单元，开发人员可以直观的理解程序单元
的基础API。
</li>
<li>表达设计。在测试驱动开发的软件实践中，单元测试可以取代正式的设计。
每一个单元测试案例均可以视为一项类、方法和待观察行为等设计元素。
</li>
</ol>
</div>

<div id="outline-container-sec-1-2-1" class="outline-4">
<h4 id="sec-1-2-1"><span class="section-number-4">1.2.1</span> 单元测试的框架</h4>
<div class="outline-text-4" id="text-1-2-1">
<p>
为了简单与系统化单元测试过程，基本借助于单元测试框架。如今基本任何编程
语言都有几套自身的单元测试框架。而且广泛使用的框架都是<a href="http://en.wikipedia.org/wiki/XUnit">属于xUnit家族</a>
（CppUnit, JUnit, PyUnit, and etc.)。xUnit系的框架易于使用，提供一套自
动化测试的方案。所有的xUint框架拥有如下的基本元件框架：
</p>
<ul class="org-ul">
<li>Assertions。验证程序某一结果。
</li>
<li>Test case（测试用例）。包含某个功能的多个Assertions。
</li>
<li>Test suites（测试套件）。包含多个相关的测试用例。
</li>
<li>Test fixtures（测试夹具）。提供测试开始时执行数据或状态的初始化，结
束时执行数据或状态的清理工作。
</li>
<li>同时包括Test runner，Test execution和Test result formatter。
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-1-2-2" class="outline-4">
<h4 id="sec-1-2-2"><span class="section-number-4">1.2.2</span> 模仿对象</h4>
<div class="outline-text-4" id="text-1-2-2">
<p>
在单元测试中，模拟对象可以模拟复杂的、真实的（非模拟）对象的行为， 如
果真实的对象无法放入单元测试中，使用模拟对象就很有帮助。
</p>

<p>
在下面的情形，可能使用模拟对象来代替真实对象更好:
</p>
<ul class="org-ul">
<li>真实对象的行为是不确定的（例如，当前的时间或当前的温度）；
</li>
<li>真实对象很难搭建起来；
</li>
<li>真实对象的行为很难触发（例如，网络错误）；
</li>
<li>真实对象速度很慢（例如，一个完整的数据库，在测试之前可能需要初始化）；
</li>
<li>真实对象可能还不存在或之后会改动；
</li>
<li>真实对象可能包含不能用作测试（而不是为实际工作）的信息和方法。
</li>
</ul>

<p>
模拟对象具有和要模拟的真实对象的相同的接口，可以让调用该接口的对象不知
道在使用真实对象还是模拟对象。现有的许多模拟对象框架允许程序员指定模拟
对象上的哪些方法，将按照什么顺序被调用，以及传入什么参数，将返回什么值。
这样，复杂对象（例如网络套接字）的行为将可以使用模拟对象来模拟，允许程
序员来发现被测对象在可能各种存在的状态是否响应正确。
</p>

<p>
典型的流程基本如下：
</p>
<ol class="org-ol">
<li>指定你需要测试的类的接口
</li>
<li>根据接口，用某个模拟框架来创建一个模拟类
</li>
<li>接下来就如单元测试一样，建立测试用例，用这个模拟对象代替实际的对象。
一般按照如下进行：
<ul class="org-ul">
<li>首先创建模拟类实例
</li>
<li>针对模拟类，设置它的预期的行为。也就是那个方法被会被调用，数据返
回什么对于特定调用等。
</li>
<li>针对模拟类的行为，调用并判断预期的结果是否符合实际要求。
</li>
</ul>
</li>
</ol>
</div>
</div>
</div>

<div id="outline-container-sec-1-3" class="outline-3">
<h3 id="sec-1-3"><span class="section-number-3">1.3</span> 如何组织测试实例</h3>
<div class="outline-text-3" id="text-1-3">
<p>
应该为所有外部可以访问的函数创建单元测试：没有定义为static的自由函数，
类里的公共函数。单元测试应该涵盖函数的主要运行路径，包括不同的分支，循
环等。必须处理细小的，边缘情况，提供错误或随即的数据，使得你能测试你的
错误处理功能。
</p>

<p>
如何写好单元测试（比如每个测试只做一件事，测试需要短小而简洁等），需要
好好设计与思考，比较好的单元测试指南<a href="http://geosoft.no/development/unittesting.html">这里</a>.
</p>

<p>
把很多个测试用例组合到一个大的函数中，是否更好提供代码的可读性与提高它
的简洁性呢。并不是，这样做并不好，参考<a href="http://www.boost.org/doc/libs/1_45_0/libs/test/doc/html/utf/user-guide/test-organization.html">这里</a>.
</p>

<p>
代码的可测试性同样依赖于代码的设计上。很多时候很难写好单元测试，是因为
要测试的功能隐藏在很多个接口里，或存在很多的互相依赖以致很难正确初始化
它们。基本的代码设计原则是：
</p>
<ul class="org-ul">
<li>代码需要松耦合——类或函数越少的依赖越好;
</li>
<li>避免设计复杂的大函数，尽量一个函数做一件事情;
</li>
<li>尽量减少公共接口。
</li>
</ul>

<p>
更多的模式设计原则在
<a href="http://googletesting.blogspot.hk/2008/08/by-miko-hevery-so-you-decided-to.html">Google Test Blog</a>
</p>
</div>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 面向C++的测试实例</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1"><span class="section-number-3">2.1</span> 面向C++的单元测试</h3>
<div class="outline-text-3" id="text-2-1">
<p>
使用GTest做单元测试和使用Gmock做模拟类测试。
</p>
</div>

<div id="outline-container-sec-2-1-1" class="outline-4">
<h4 id="sec-2-1-1"><span class="section-number-4">2.1.1</span> 面向C++的单元测试和GTest实践</h4>
<div class="outline-text-4" id="text-2-1-1">
<p>
现在有很多C++的<a href="http://en.wikipedia.org/wiki/List_of_unit_testing_frameworks#C.2B.2B">单元测试框架</a>。最受欢迎的是<a href="https://code.google.com/p/googletest/">Google C++ Testing Framework</a>
和<a href="http://www.boost.org/doc/libs/1_55_0/libs/test/doc/html/index.html">Boost.Test</a>。 两者有很多相似之处，这里针对Google Testing Framework展
开一个简单的实例。整个代码可以在<a href="https://github.com/shishougang/cpp_test_examples">github下载</a>。
</p>

<p>
Google C++ Testing Framework提供比较完善的文档，现在更新到V1.7：
</p>
<ul class="org-ul">
<li><a href="https://code.google.com/p/googletest/wiki/V1_7_Primer">入门</a>
</li>
<li><a href="https://code.google.com/p/googletest/wiki/V1_7_Samples">例子</a>
</li>
<li><a href="https://code.google.com/p/googletest/wiki/V1_7_AdvancedGuide">高级指南</a>
</li>
<li><a href="https://code.google.com/p/googletest/wiki/V1_7_FAQ">FAQ</a>
</li>
</ul>

<p>
使用Google C++ Testing Framework基本流程：
</p>
<ol class="org-ol">
<li>建立要测试类或函数的单元测试文件，一般命名 <code>name_unittest.cc</code>, 包含
   <code>&lt;gtest/gtest.h&gt;</code> 头文件；
</li>
<li>针对类或函数的功能，建立相对应的测试用例，一般就是一大堆的assertion，
检验希望得到的返回值是否正确；
</li>
<li>编译后，链接GTest相应的库 <code>gtest gtest_main</code> ；
</li>
<li>运行单元测试程序，或输出测试结果，或直接查看
</li>
</ol>
</div>

<div id="outline-container-sec-2-1-1-1" class="outline-5">
<h5 id="sec-2-1-1-1"><span class="section-number-5">2.1.1.1</span> 使用Google Test提供的第一个实例</h5>
<div class="outline-text-5" id="text-2-1-1-1">
<p>
<code>sample1.c</code> 有两个需要测试的函数：
</p>
<div class="org-src-container">

<pre class="src src-c"><span style="color: #98fb98;">int</span> <span style="color: #87cefa;">Factorial</span>(<span style="color: #98fb98;">int</span> <span style="color: #eedd82;">n</span>) {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">result</span> = 1;
  <span style="color: #00ffff;">for</span> (<span style="color: #98fb98;">int</span> <span style="color: #eedd82;">i</span> = 1; i &lt;= n; i++) {
    result *= i;
  }

  <span style="color: #00ffff;">return</span> result;
}

<span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Returns true iff n is a prime number.</span>
<span style="color: #98fb98;">bool</span> <span style="color: #87cefa;">IsPrime</span>(<span style="color: #98fb98;">int</span> <span style="color: #eedd82;">n</span>) {
  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Trivial case 1: small numbers</span>
  <span style="color: #00ffff;">if</span> (n &lt;= 1) <span style="color: #00ffff;">return</span> <span style="color: #7fffd4;">false</span>;

  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Trivial case 2: even numbers</span>
  <span style="color: #00ffff;">if</span> (n % 2 == 0) <span style="color: #00ffff;">return</span> n == 2;

  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Now, we have that n is odd and n &gt;= 3.</span>

  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Try to divide n by every odd number i, starting from 3</span>
  <span style="color: #00ffff;">for</span> (<span style="color: #98fb98;">int</span> <span style="color: #eedd82;">i</span> = 3; ; i += 2) {
    <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">We only have to try i up to the squre root of n</span>
    <span style="color: #00ffff;">if</span> (i &gt; n/i) <span style="color: #00ffff;">break</span>;

    <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Now, we have i &lt;= n/i &lt; n.</span>
    <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">If n is divisible by i, n is not prime.</span>
    <span style="color: #00ffff;">if</span> (n % i == 0) <span style="color: #00ffff;">return</span> <span style="color: #7fffd4;">false</span>;
  }

  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">n has no integer factor in the range (1, n), and thus is prime.</span>
  <span style="color: #00ffff;">return</span> <span style="color: #7fffd4;">true</span>;
}
</pre>
</div>

<p>
创建它的一个单元测试文件 <code>sample1_unittest.c</code> 。
单元测试文件清晰的设计了各个测试。
</p>
<div class="org-src-container">

<pre class="src src-c"><span style="color: #87cefa;">TEST</span>(<span style="color: #98fb98;">FactorialTest</span>, <span style="color: #98fb98;">Negative</span>) {
  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">This test is named "Negative", and belongs to the "FactorialTest"</span>
  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">test case.</span>
  EXPECT_EQ(1, Factorial(-5));
  EXPECT_EQ(1, Factorial(-1));
  EXPECT_GT(Factorial(-10), 0);

  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">&lt;TechnicalDetails&gt;</span>
  <span style="color: #ff7f24;">//</span>
  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">EXPECT_EQ(expected, actual) is the same as</span>
  <span style="color: #ff7f24;">//</span>
  <span style="color: #ff7f24;">//   </span><span style="color: #ff7f24;">EXPECT_TRUE((expected) == (actual))</span>
  <span style="color: #ff7f24;">//</span>
  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">except that it will print both the expected value and the actual</span>
  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">value when the assertion fails.  This is very helpful for</span>
  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">debugging.  Therefore in this case EXPECT_EQ is preferred.</span>
  <span style="color: #ff7f24;">//</span>
  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">On the other hand, EXPECT_TRUE accepts any Boolean expression,</span>
  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">and is thus more general.</span>
  <span style="color: #ff7f24;">//</span>
  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">&lt;/TechnicalDetails&gt;</span>
}

<span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Tests factorial of 0.</span>
<span style="color: #87cefa;">TEST</span>(<span style="color: #98fb98;">FactorialTest</span>, <span style="color: #98fb98;">Zero</span>) {
  EXPECT_EQ(1, Factorial(0));
}

<span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Tests factorial of positive numbers.</span>
<span style="color: #87cefa;">TEST</span>(<span style="color: #98fb98;">FactorialTest</span>, <span style="color: #98fb98;">Positive</span>) {
  EXPECT_EQ(1, Factorial(1));
  EXPECT_EQ(2, Factorial(2));
  EXPECT_EQ(6, Factorial(3));
  EXPECT_EQ(40320, Factorial(8));
}


<span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Tests IsPrime()</span>

<span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Tests negative input.</span>
<span style="color: #87cefa;">TEST</span>(<span style="color: #98fb98;">IsPrimeTest</span>, <span style="color: #98fb98;">Negative</span>) {
  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">This test belongs to the IsPrimeTest test case.</span>

  EXPECT_FALSE(IsPrime(-1));
  EXPECT_FALSE(IsPrime(-2));
  EXPECT_FALSE(IsPrime(INT_MIN));
}

<span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Tests some trivial cases.</span>
<span style="color: #87cefa;">TEST</span>(<span style="color: #98fb98;">IsPrimeTest</span>, <span style="color: #98fb98;">Trivial</span>) {
  EXPECT_FALSE(IsPrime(0));
  EXPECT_FALSE(IsPrime(1));
  EXPECT_TRUE(IsPrime(2));
  EXPECT_TRUE(IsPrime(3));
}

<span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">Tests positive input.</span>
<span style="color: #87cefa;">TEST</span>(<span style="color: #98fb98;">IsPrimeTest</span>, <span style="color: #98fb98;">Positive</span>) {
  EXPECT_FALSE(IsPrime(4));
  EXPECT_TRUE(IsPrime(5));
  EXPECT_FALSE(IsPrime(6));
  EXPECT_TRUE(IsPrime(23));
}
</pre>
</div>

<p>
编译并运行单元测试程序[下面说如何把GTest框架融合进自己的工程里]
</p>

<div class="org-src-container">

<pre class="src src-sh">Running main() from gtest_main.cc
[==========] Running 6 tests from 2 test cases.
[----------] Global test environment set-up.
[----------] 3 tests from FactorialTest
[ RUN      ] FactorialTest.Negative
[       OK ] FactorialTest.Negative (0 ms)
[ RUN      ] FactorialTest.Zero
[       OK ] FactorialTest.Zero (0 ms)
[ RUN      ] FactorialTest.Positive
[       OK ] FactorialTest.Positive (0 ms)
[----------] 3 tests from FactorialTest (0 ms total)

[----------] 3 tests from IsPrimeTest
[ RUN      ] IsPrimeTest.Negative
[       OK ] IsPrimeTest.Negative (0 ms)
[ RUN      ] IsPrimeTest.Trivial
[       OK ] IsPrimeTest.Trivial (0 ms)
[ RUN      ] IsPrimeTest.Positive
[       OK ] IsPrimeTest.Positive (0 ms)
[----------] 3 tests from IsPrimeTest (0 ms total)

[----------] Global test environment tear-down
[==========] 6 tests from 2 test cases ran. (0 ms total)
[  PASSED  ] 6 tests.
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-sec-2-1-2" class="outline-4">
<h4 id="sec-2-1-2"><span class="section-number-4">2.1.2</span> 如何把GTest融合进你的CMake工程里</h4>
<div class="outline-text-4" id="text-2-1-2">
<p>
<a href="https://code.google.com/p/googletest/wiki/V1_7_FAQ#Why_is_it_not_recommended_to_install_a_pre-compiled_copy_of_Goog">GTest文档并不建议使用提前编译好复制的GTest</a>, 因为如果你编译Google Test
和你的测试代码使用不同的编译标志，他们可能会看到不同定义但是相同的类或
函数或变量（比如：因为使用 <code>#if</code> 在Google Test中）。当程序链接起来，连
接器可能并不能捕捉到错误（因为在C++标准中并没有要求捕捉这样的违规),那
么当它们链接起来后，程序在运行时会产生一些不可预期的行为，使得非常难调
试。
</p>

<p>
所以这里我们把Google Test的源代码直接融合进我们的CMake工程里，让它一起
编译，并把测试用例添加入 <code>make test</code> , 具体见<a href="https://github.com/shishougang/cpp_test_examples">github</a>。
</p>

<ol class="org-ol">
<li>把gtest的工程放在我们工程的thirdparty文件里。
</li>
<li>定义gtest的library和包含其目录编译它
</li>
</ol>

<div class="org-src-container">

<pre class="src src-sh"><span style="color: #87cefa;">SET</span> (MAINFOLDER ${<span style="color: #eedd82;">PROJECT_SOURCE_DIR</span>})
<span style="color: #87cefa;">add_subdirectory</span>(${<span style="color: #eedd82;">MAINFOLDER</span>}/thirdparty/gtest)
<span style="color: #b0c4de;">set</span>(GTEST_ROOT ${<span style="color: #eedd82;">MAINFOLDER</span>}/thirdparty/gtest)
<span style="color: #b0c4de;">set</span>(GTEST_INCLUDE_DIR ${<span style="color: #eedd82;">GTEST_ROOT</span>}/include)
<span style="color: #b0c4de;">set</span>(GTEST_LIBRARIES gtest gtest_main)
<span style="color: #87cefa;">include_directories</span>(${<span style="color: #eedd82;">GTEST_INCLUDE_DIR</span>})
<span style="color: #87cefa;">include</span>(gtest)
</pre>
</div>

<ol class="org-ol">
<li>编译单元测试时链接gtest的lib
</li>
</ol>
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Define an executable and adds a test for it using the most basic libraries</span>
<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Args:</span>
<span style="color: #ff7f24;">#    </span><span style="color: #ff7f24;">name  - name of test. Must have a source file in test/&lt;name&gt;.cc</span>
<span style="color: #ff7f24;">#    </span><span style="color: #ff7f24;">...   - optional list of additional library dependencies</span>
<span style="color: #00ffff;">function</span>(project_test name)
  add_executable(${<span style="color: #eedd82;">name</span>} test/${<span style="color: #eedd82;">name</span>}.cc)
  <span style="color: #00ffff;">foreach</span> (lib <span style="color: #ffa07a;">"${ARGN}"</span>)
    target_link_libraries(${<span style="color: #eedd82;">name</span>} ${<span style="color: #eedd82;">lib</span>})
  endforeach()
  target_linK_libraries(${<span style="color: #eedd82;">name</span>} ${<span style="color: #eedd82;">GTEST_LIBRARIES</span>})
  add_test(${<span style="color: #eedd82;">name</span>} ${<span style="color: #eedd82;">EXECUTABLE_OUTPUT_PATH</span>}/${<span style="color: #eedd82;">name</span>})
<span style="color: #87cefa;">endfunction</span>()

<span style="color: #00ffff;">if</span> (build_tests)
  project_test(sample1_unittest sample1)
<span style="color: #87cefa;">endif</span>()
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-2-1-3" class="outline-4">
<h4 id="sec-2-1-3"><span class="section-number-4">2.1.3</span> GMock实践</h4>
<div class="outline-text-4" id="text-2-1-3">
<p>
现在针对Ｃ＋＋的模拟框架有：<a href="https://code.google.com/p/googlemock/"> Google C++ mocking framework</a>, <a href="http://www.assembla.com/wiki/show/hippomocks">HippoMocks</a>,
<a href="https://code.google.com/p/amop/">AMOP</a>, <a href="http://sourceforge.net/apps/mediawiki/turtle/index.php?title=Turtle">Turtle</a> 等。其中Google mocking framework比较完善并持续维护，我们
将使用它。
</p>

<p>
Google mocking framework有完善的文档，在其
<a href="https://code.google.com/p/googlemock/w/list">wiki 页面</a>。现在的Mocking版本里已经包括Google C++ Testing Framework，不
需要分别编译和安装。
</p>

<p>
使用Google Mocking Framework基本流程：
</p>
<ol class="org-ol">
<li>对所给类创建它的一个模拟对象。使用提供的很多宏来定义需要模拟的函数，
也提供了一个工具 <code>gmock_gen.py</code> 在Google Mock的目录
<code>scripts/generator/</code> 下， 用它自动生成模拟类的定义。
</li>
<li>对你的模拟类，创建相应的测试用例。一般流程是：
<ul class="org-ul">
<li>创建模拟类，使用提供的宏或函数，针对不同的场景，设置模拟类接口相
应的行为，比如调用多少次，返回什么值等等
</li>
<li>有了这个模拟类，测试需要用到它的接口或功能。创建相应的测试用例
</li>
</ul>
</li>
</ol>
</div>
<div id="outline-container-sec-2-1-3-1" class="outline-5">
<h5 id="sec-2-1-3-1"><span class="section-number-5">2.1.3.1</span> 需要模拟的源文件</h5>
<div class="outline-text-5" id="text-2-1-3-1">
<p>
现在有一个简单的Offset类，其中有一个虚函数接口 <code>virtual int
DoSetOffset(int offset) = 0;</code> ，暂时没有创建继承类来实现这个接口，先用
Gmock模拟这个接口（必须是虚函数才能被覆盖模拟它）行为来做到单元测试这
个类。
</p>

<div class="org-src-container">

<pre class="src src-c"><span style="color: #ff7f24;">//</span><span style="color: #ff7f24;">sample.h</span>
<span style="color: #98fb98;">class</span> <span style="color: #eedd82;">MyOffset</span>{
 <span style="color: #7fffd4;">public</span>:
  <span style="color: #eedd82;">MyOffset</span>() {}
  virtual ~MyOffset() {}

  <span style="color: #ff7f24;">/*</span>
<span style="color: #ff7f24;">   * Set the offsest</span>
<span style="color: #ff7f24;">   </span><span style="color: #ff7f24;">*/</span>
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">SetOffset</span>(<span style="color: #98fb98;">int</span> <span style="color: #eedd82;">offset</span>);

  <span style="color: #ff7f24;">/*</span>
<span style="color: #ff7f24;">   * Returns the current offset</span>
<span style="color: #ff7f24;">   </span><span style="color: #ff7f24;">*/</span>
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">offset</span>() <span style="color: #00ffff;">const</span> { <span style="color: #00ffff;">return</span> offset_; }

 protected:
  <span style="color: #ff7f24;">/*</span>
<span style="color: #ff7f24;">   * Set the offset</span>
<span style="color: #ff7f24;">   *</span>
<span style="color: #ff7f24;">   * This method is called by the public SetOffset() method.</span>
<span style="color: #ff7f24;">   </span><span style="color: #ff7f24;">*/</span>
  virtual <span style="color: #98fb98;">int</span> DoSetOffset(<span style="color: #98fb98;">int</span> <span style="color: #eedd82;">offset</span>) = 0;

 <span style="color: #7fffd4;">private</span>:
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">offset_</span>; 
};
</pre>
</div>

<p>
函数 <code>int SetOffset(int offset);</code> 是外部接口，内部调用虚函数 <code>int
DoSetOffset(int offset)</code>
</p>

<div class="org-src-container">

<pre class="src src-c"><span style="color: #ff7f24;">//</span><span style="color: #ff7f24;">sample.c</span>
<span style="color: #98fb98;">int</span> <span style="color: #87cefa;">MyOffset</span>::SetOffset(<span style="color: #98fb98;">int</span> <span style="color: #eedd82;">offset</span>) {
  <span style="color: #00ffff;">if</span> (offset &lt; 0) {
    offset_ = -1;
    <span style="color: #00ffff;">return</span> -1;
  }
  offset_ = DoSetOffset(offset);
  <span style="color: #00ffff;">return</span> offset_;
}
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-2-1-3-2" class="outline-5">
<h5 id="sec-2-1-3-2"><span class="section-number-5">2.1.3.2</span> 利用GMock创建模拟类</h5>
<div class="outline-text-5" id="text-2-1-3-2">
<p>
在单元测试文件（ <code>sample_test.cc</code> ）里包含GMock和GTest的头文件
</p>
<div class="org-src-container">

<pre class="src src-c"><span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;gmock/gmock.h&gt;</span>
<span style="color: #b0c4de;">#include</span> <span style="color: #ffa07a;">&lt;gtest/gtest.h&gt;</span>
</pre>
</div>

<p>
创建模拟类：
</p>
<div class="org-src-container">

<pre class="src src-c"><span style="color: #98fb98;">class</span> <span style="color: #eedd82;">MockMyOffset</span> : public MyOffset {
 <span style="color: #7fffd4;">public</span>:
  <span style="color: #eedd82;">MockMyOffset</span>() {}
  virtual ~MockMyOffset() {}

  MOCK_METHOD1(DoSetOffset, <span style="color: #98fb98;">int</span>(<span style="color: #98fb98;">int</span> <span style="color: #eedd82;">offset</span>));
};
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-2-1-3-3" class="outline-5">
<h5 id="sec-2-1-3-3"><span class="section-number-5">2.1.3.3</span> 配置模拟类的行为并创建测试用例</h5>
<div class="outline-text-5" id="text-2-1-3-3">
<p>
有了模拟类，配置模拟类中的函数的行为，并利用GTest做结果验证：
</p>

<div class="org-src-container">

<pre class="src src-c"><span style="color: #87cefa;">TEST</span>(<span style="color: #98fb98;">MyOffsetTest</span>, <span style="color: #98fb98;">SetOffset</span>) {
  <span style="color: #98fb98;">MockMyOffset</span> <span style="color: #eedd82;">my_offset</span>;
  <span style="color: #ff7f24;">/* </span><span style="color: #ff7f24;">&#24403;DoSetOffset&#30340;&#36827;&#20837;&#21442;&#25968;&#26159;10,&#23601;&#36820;&#22238;&#19968;&#27425;10 </span><span style="color: #ff7f24;">*/</span>
  EXPECT_CALL(my_offset, DoSetOffset(10)).WillOnce(Return(10));
  EXPECT_EQ(10, my_offset.SetOffset(10));
  EXPECT_EQ(10, my_offset.offset());

  EXPECT_CALL(my_offset, DoSetOffset(5)).WillOnce(Return(5));
  EXPECT_EQ(5, my_offset.SetOffset(5));
  EXPECT_EQ(5, my_offset.offset());

  EXPECT_CALL(my_offset, DoSetOffset(20)).WillOnce(Return(1));
  EXPECT_EQ(1, my_offset.SetOffset(20));
  EXPECT_EQ(1, my_offset.offset());

  EXPECT_CALL(my_offset, DoSetOffset(10)).WillOnce(Return(-1));
  EXPECT_EQ(-1, my_offset.SetOffset(10));
  EXPECT_EQ(-1, my_offset.offset());
}
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-2-1-3-4" class="outline-5">
<h5 id="sec-2-1-3-4"><span class="section-number-5">2.1.3.4</span> 编译并运行单元测试</h5>
<div class="outline-text-5" id="text-2-1-3-4">
<div class="org-src-container">

<pre class="src src-sh">&#10140;  bin  ./sample_test 
Running main() from gtest_main.cc
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from MyOffsetTest
[ RUN      ] MyOffsetTest.SetOffset
[       OK ] MyOffsetTest.SetOffset (0 ms)
[----------] 1 test from MyOffsetTest (0 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (0 ms total)
[  PASSED  ] 1 test.
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-sec-2-1-4" class="outline-4">
<h4 id="sec-2-1-4"><span class="section-number-4">2.1.4</span> 如何把GMock融合进你的CMake工程里</h4>
<div class="outline-text-4" id="text-2-1-4">
<p>
和GTest一样，同样我们把包含GTest的GMock融合进我们的CMake工程里，和我们
工程一同编译。<a href="https://github.com/shishougang/cpp_test_examples">源文件</a>。
</p>


<ol class="org-ol">
<li>把gmock的工程放在我们工程的thirdparty文件里。
</li>
<li>定义gtest和gmock的library和包含其目录编译它
</li>
</ol>

<div class="org-src-container">

<pre class="src src-sh"><span style="color: #b0c4de;">set</span>(GMOCK_ROOT ${<span style="color: #eedd82;">MAINFOLDER</span>}/thirdparty/gmock)
<span style="color: #87cefa;">add_subdirectory</span>(${<span style="color: #eedd82;">GMOCK_ROOT</span>})
<span style="color: #b0c4de;">set</span>(GMOCK_INCLUDE_DIR ${<span style="color: #eedd82;">GMOCK_ROOT</span>}/include)
<span style="color: #b0c4de;">set</span>(GMOCK_LIBRARIES gmock)
<span style="color: #87cefa;">include_directories</span>(${<span style="color: #eedd82;">GMOCK_INCLUDE_DIR</span>})
 include(gmock)
  <span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">gtest</span>
<span style="color: #b0c4de;">set</span>(GTEST_ROOT ${<span style="color: #eedd82;">GMOCK_ROOT</span>}/gtest)
<span style="color: #b0c4de;">set</span>(GTEST_INCLUDE_DIR ${<span style="color: #eedd82;">GTEST_ROOT</span>}/include)
<span style="color: #b0c4de;">set</span>(GTEST_LIBRARIES gtest gtest_main)
<span style="color: #87cefa;">include_directories</span>(${<span style="color: #eedd82;">GTEST_INCLUDE_DIR</span>})
</pre>
</div>

<ol class="org-ol">
<li>编译单元测试时链接gtest和gmock的lib
</li>
</ol>

<div class="org-src-container">

<pre class="src src-sh"><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Define an executable and adds a test for it using the most basic libraries</span>
<span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">Args:</span>
<span style="color: #ff7f24;">#    </span><span style="color: #ff7f24;">name  - name of test. Must have a source file in test/&lt;name&gt;.cc</span>
<span style="color: #ff7f24;">#    </span><span style="color: #ff7f24;">...   - optional list of additional library dependencies</span>
<span style="color: #00ffff;">function</span>(project_test name)
  add_executable(${<span style="color: #eedd82;">name</span>} test/${<span style="color: #eedd82;">name</span>}.cc)
  <span style="color: #00ffff;">foreach</span> (lib <span style="color: #ffa07a;">"${ARGN}"</span>)
    target_link_libraries(${<span style="color: #eedd82;">name</span>} ${<span style="color: #eedd82;">lib</span>})
  endforeach()
  target_linK_libraries(${<span style="color: #eedd82;">name</span>} ${<span style="color: #eedd82;">GTEST_LIBRARIES</span>})
  target_linK_libraries(${<span style="color: #eedd82;">name</span>} ${<span style="color: #eedd82;">GMOCK_LIBRARIES</span>})
  add_test(${<span style="color: #eedd82;">name</span>} ${<span style="color: #eedd82;">EXECUTABLE_OUTPUT_PATH</span>}/${<span style="color: #eedd82;">name</span>})
<span style="color: #87cefa;">endfunction</span>()

<span style="color: #00ffff;">if</span> (build_tests)
  project_test(sample_test sample)
<span style="color: #87cefa;">endif</span>()
</pre>
</div>
</div>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 其他资料</h2>
<div class="outline-text-2" id="text-3">
</div><div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> Books:</h3>
<div class="outline-text-3" id="text-3-1">
<ul class="org-ul">
<li>Kent Beck. Test-driven development: By example;
</li>
<li>David Astels. Test Driven Development: A Practical Guide;
</li>
<li>Robert C. Martin. Clean Code: A Handbook of Agile Software Craftsmanship (this book is mostly for Java developers);
</li>
<li>Michael Feathers. Working Effectively with Legacy Code;
</li>
<li>Martin Fowler, Kent Beck, John Brant, William Opdyke, Don Roberts. Refactoring: Improving the Design of Existing Code;
</li>
<li>Steve McConnell, Code Complete, 2ed 
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> Online resources:</h3>
<div class="outline-text-3" id="text-3-2">
<ul class="org-ul">
<li><a href="http://stackoverflow.com/questions/tagged/unit-testing">Unit testing topic at StackOverflow</a>;
</li>
<li><a href="http://googletesting.blogspot.com/">Google Testing Blog</a>;
</li>
<li>Wiki at <a href="http://c2.com/cgi/wiki?UnitTest">c2.com</a>;
</li>
<li><a href="http://www.lenholgate.com/blog/2004/05/practical-testing.html">Practical Testing</a> — series of blog posts on testing.
</li>
<li><a href="http://alexott.net/en/cpp/CppTestingIntro.html">Boost.Test and GMock Tutorial</a>
</li>
</ul>
</div>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" name="fn.1" class="footnum" href="#fnr.1">1</a></sup> <p class="footpara">
<a href="http://en.wikipedia.org/wiki/Test-Driven_Development_by_Example">http://en.wikipedia.org/wiki/Test-Driven_Development_by_Example</a>
</p></div>


</div>
</div>
]]></content>
  </entry>
  
</feed>
