<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Chain of Responsibility | (learn&think)]]></title>
  <link href="http://dreamrunner.org/tags/chain-of-responsibility/atom.xml" rel="self"/>
  <link href="http://dreamrunner.org/"/>
  <updated>2014-06-09T23:14:28+08:00</updated>
  <id>http://dreamrunner.org/</id>
  <author>
    <name><![CDATA[DreamRunner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[浅谈设计模式十九: 责任链模式(Chain of Responsibility)]]></title>
    <link href="http://dreamrunner.org/blog/2014/05/04/%E6%B5%85%E8%B0%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F19/"/>
    <updated>2014-05-04T00:00:00+08:00</updated>
    <id>http://dreamrunner.org/blog/2014/05/04/浅谈设计模式19</id>
    <content type="html"><![CDATA[<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 实例</h2>
<div class="outline-text-2" id="text-1">
<p>
学校里，教师，主管，主任都有不同的职责，现在家长有不同的请求，比如他们小孩的日常表现或付学费等，但家长并不清楚学校内部的职责归属，哪个请求该去找那个人处理，家长一般直接与孩子的老师交流，那么如何满足家长不同的请求呢?
</p>

<!-- more -->
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 责任链模式(Chain of Responsibility)</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1"><span class="section-number-3">2.1</span> 目的</h3>
<div class="outline-text-3" id="text-2-1">
<p>
避免请求的发送者通过给予多个对象机会去处理这个请求的方式到它的接收者的耦合。把接收对象组成一条链路，并把这个请求沿着这条链路传送直到一个对象处理它。
</p>
</div>
</div>

<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2"><span class="section-number-3">2.2</span> 实现</h3>
<div class="outline-text-3" id="text-2-2">
<p>
利用责任链模式把处理者串起来,如果这个具体处理者能处理这个请求，它就处理它，否则它传递这个请求给它的后继对象。<a href="https://github.com/shishougang/DesignPattern-CPP/tree/master/src/chain_of_responsibility">代码实例在这里</a>。
</p>
</div>
</div>

<div id="outline-container-sec-2-3" class="outline-3">
<h3 id="sec-2-3"><span class="section-number-3">2.3</span> 抽象处理者类</h3>
<div class="outline-text-3" id="text-2-3">
<ol class="org-ol">
<li>为处理请求定义一个接口。
</li>
<li>维护后继者的引用
</li>
</ol>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00ffff;">class</span> <span style="color: #98fb98;">Staff</span> {
 <span style="color: #00ffff;">public</span>:
  <span style="color: #00ffff;">virtual</span> ~<span style="color: #87cefa;">Staff</span>() {}
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">set_name</span>(<span style="color: #98fb98;">string</span> <span style="color: #eedd82;">name</span>) {name_ = name;}
  <span style="color: #98fb98;">string</span> <span style="color: #87cefa;">name</span>() {<span style="color: #00ffff;">return</span> name_;}
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">set_boss</span>(<span style="color: #98fb98;">Staff</span> *<span style="color: #eedd82;">boss</span>) {boss_ = boss;}
  <span style="color: #98fb98;">Staff</span>* <span style="color: #87cefa;">boss</span>() {<span style="color: #00ffff;">return</span> boss_;}
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">ProcessRequest</span>(<span style="color: #98fb98;">Request</span> *<span style="color: #eedd82;">a_request</span>) = 0;
 <span style="color: #00ffff;">protected</span>:
  <span style="color: #98fb98;">string</span> <span style="color: #eedd82;">name_</span>;
  <span style="color: #98fb98;">Staff</span> *<span style="color: #eedd82;">boss_</span>;
};
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-2-4" class="outline-3">
<h3 id="sec-2-4"><span class="section-number-3">2.4</span> 请求类</h3>
<div class="outline-text-3" id="text-2-4">
<p>
请求分为不同的等级,来被不同职位的人处理.这里分为低,中和高三个等级,分别被老师,主管和主任处理.
</p>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00ffff;">enum</span> <span style="color: #98fb98;">ResponsiableLevel</span> {
  <span style="color: #eedd82;">kLow</span>,
  <span style="color: #eedd82;">kMedium</span>,
  <span style="color: #eedd82;">kHigh</span>
};

<span style="color: #00ffff;">class</span> <span style="color: #98fb98;">Request</span> {
 <span style="color: #00ffff;">public</span>:
  <span style="color: #00ffff;">virtual</span> ~<span style="color: #87cefa;">Request</span>() {}
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">set_level</span>(<span style="color: #98fb98;">ResponsiableLevel</span> <span style="color: #eedd82;">level</span>) {level_ = level;}
  <span style="color: #98fb98;">ResponsiableLevel</span> <span style="color: #87cefa;">level</span>() {<span style="color: #00ffff;">return</span> level_;}
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">set_description</span>(<span style="color: #98fb98;">string</span> <span style="color: #eedd82;">description</span>) {description_ = description;}
  <span style="color: #98fb98;">string</span> <span style="color: #87cefa;">description</span>() {<span style="color: #00ffff;">return</span> description_;}
 <span style="color: #00ffff;">private</span>:
  <span style="color: #98fb98;">string</span> <span style="color: #eedd82;">description_</span>;
  <span style="color: #98fb98;">ResponsiableLevel</span> <span style="color: #eedd82;">level_</span>;
};
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2-5" class="outline-3">
<h3 id="sec-2-5"><span class="section-number-3">2.5</span> 具体处理类</h3>
<div class="outline-text-3" id="text-2-5">
<p>
这里分为老师,主管和主任.
</p>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #98fb98;">void</span> <span style="color: #7fffd4;">Teacher</span>::<span style="color: #87cefa;">ProcessRequest</span>(<span style="color: #98fb98;">Request</span> *<span style="color: #eedd82;">a_request</span>) {
  <span style="color: #00ffff;">if</span> (a_request-&gt;level() == kLow) {
    cout &lt;&lt; <span style="color: #ffa07a;">"This is "</span> &lt;&lt; name_ &lt;&lt; <span style="color: #ffa07a;">". I am a teacher of this daycare. "</span> &lt;&lt;
        <span style="color: #ffa07a;">"Your request has been approved!"</span> &lt;&lt; endl;
  } <span style="color: #00ffff;">else</span> {
    <span style="color: #00ffff;">if</span> (boss_ != <span style="color: #7fffd4;">NULL</span>) {
      cout &lt;&lt; <span style="color: #ffa07a;">"This is "</span> &lt;&lt; name_ &lt;&lt; <span style="color: #ffa07a;">". I am a teacher of this daycare. "</span> &lt;&lt;
          <span style="color: #ffa07a;">" I am not able to process your request. "</span> &lt;&lt; <span style="color: #ffa07a;">"My boss "</span> &lt;&lt;
          boss_-&gt;name() &lt;&lt; <span style="color: #ffa07a;">"will review your request"</span> &lt;&lt; endl;
      boss_-&gt;ProcessRequest(a_request);
    } <span style="color: #00ffff;">else</span> {
      cout &lt;&lt; <span style="color: #ffa07a;">"No boss assigned"</span> &lt;&lt; endl;
    }
  }
}

<span style="color: #98fb98;">void</span> <span style="color: #7fffd4;">Manager</span>::<span style="color: #87cefa;">ProcessRequest</span>(<span style="color: #98fb98;">Request</span> *<span style="color: #eedd82;">a_request</span>) {
  <span style="color: #00ffff;">if</span> (a_request-&gt;level() == kMedium) {
    cout &lt;&lt; <span style="color: #ffa07a;">"This is "</span> &lt;&lt; name_ &lt;&lt; <span style="color: #ffa07a;">". I am a manager of this daycare. "</span> &lt;&lt;
        <span style="color: #ffa07a;">"Your request has been approved!"</span> &lt;&lt; endl;
  } <span style="color: #00ffff;">else</span> {
    <span style="color: #00ffff;">if</span> (boss_ != <span style="color: #7fffd4;">NULL</span>) {
      cout &lt;&lt; <span style="color: #ffa07a;">"This is "</span> &lt;&lt; name_ &lt;&lt; <span style="color: #ffa07a;">". I am a manager of this daycare. "</span> &lt;&lt;
          <span style="color: #ffa07a;">" I am not able to process your request. "</span> &lt;&lt; <span style="color: #ffa07a;">"My boss "</span> &lt;&lt;
          boss_-&gt;name() &lt;&lt; <span style="color: #ffa07a;">"will review your request"</span> &lt;&lt; endl;
      boss_-&gt;ProcessRequest(a_request);
    } <span style="color: #00ffff;">else</span> {
      cout &lt;&lt; <span style="color: #ffa07a;">"No boss assigned"</span> &lt;&lt; endl;
    }
  }
}

<span style="color: #98fb98;">void</span> <span style="color: #7fffd4;">Director</span>::<span style="color: #87cefa;">ProcessRequest</span>(<span style="color: #98fb98;">Request</span> *<span style="color: #eedd82;">a_request</span>) {
  <span style="color: #00ffff;">if</span> (a_request-&gt;level() == kHigh) {
    cout &lt;&lt; <span style="color: #ffa07a;">"This is "</span> &lt;&lt; name_ &lt;&lt; <span style="color: #ffa07a;">". I am a director of this daycare. "</span> &lt;&lt;
        <span style="color: #ffa07a;">"Your request has been approved!"</span> &lt;&lt; endl;
  } <span style="color: #00ffff;">else</span> {
    <span style="color: #00ffff;">if</span> (boss_ != <span style="color: #7fffd4;">NULL</span>) {
      cout &lt;&lt; <span style="color: #ffa07a;">"This is "</span> &lt;&lt; name_ &lt;&lt; <span style="color: #ffa07a;">". I am a director of this daycare. "</span> &lt;&lt;
          <span style="color: #ffa07a;">" I am not able to process your request. "</span> &lt;&lt; <span style="color: #ffa07a;">"My boss "</span> &lt;&lt;
          boss_-&gt;name() &lt;&lt; <span style="color: #ffa07a;">"will review your request"</span> &lt;&lt; endl;
      boss_-&gt;ProcessRequest(a_request);
    } <span style="color: #00ffff;">else</span> {
      cout &lt;&lt; <span style="color: #ffa07a;">"No boss assigned"</span> &lt;&lt; endl;
    }
  }
}
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 总结</h2>
<div class="outline-text-2" id="text-3">
</div><div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> 责任链模式(Chain of Responsibility)结构</h3>
<div class="outline-text-3" id="text-3-1">
<img src="/images/blog/2014/chainofresponsibility/chain_of_responsibility_structure.jpeg">
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> 组成</h3>
<div class="outline-text-3" id="text-3-2">
<ul class="org-ul">
<li>处理者（Handler）
<ol class="org-ol">
<li>为处理请求定义一个接口。
</li>
<li>（可选）实现后继链接。
</li>
</ol>
</li>
<li>具体处理者（ConcreteHandler）
<ol class="org-ol">
<li>处理它负责的请求。
</li>
<li>能访问它的后继对象。
</li>
<li>如果这个具体处理者能处理这个请求，它就处理它，否则它传递这个请求给它的后继对象。
</li>
</ol>
</li>
<li>对象（Client）初始给链路中的具体处理者一个请求。
</li>
</ul>
</div>
</div>
<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3"><span class="section-number-3">3.3</span> 应用场景</h3>
<div class="outline-text-3" id="text-3-3">
<ul class="org-ul">
<li>多余一个对象要处理一个请求，并且处理者不是先验的。处理者需要自动被弹探知。
</li>
<li>你想促发促一个请求给许多个对象之一并且不想明确指定哪个接收者时。
</li>
<li>处理请求的一组对象需要被动态指定。
</li>
</ul>
</div>
</div>
<div id="outline-container-sec-3-4" class="outline-3">
<h3 id="sec-3-4"><span class="section-number-3">3.4</span> 缺点</h3>
<div class="outline-text-3" id="text-3-4">
<p>
收到不能被保证。因为一个请求没有明确的接收者，所以不能保证它将被处理——请求也能落到链路的末端而未曾被处理。一个请求也能不被处理当链路没有被合理的配置。
</p>
</div>
</div>
</div>
]]></content>
  </entry>
  
</feed>
