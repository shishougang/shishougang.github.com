<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Builder | (learn&think)]]></title>
  <link href="http://dreamrunner.org/tags/builder/atom.xml" rel="self"/>
  <link href="http://dreamrunner.org/"/>
  <updated>2014-06-15T15:10:26+08:00</updated>
  <id>http://dreamrunner.org/</id>
  <author>
    <name><![CDATA[DreamRunner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[浅谈设计模式十五: 生成器模式(Builder)]]></title>
    <link href="http://dreamrunner.org/blog/2014/05/04/%E6%B5%85%E8%B0%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F15/"/>
    <updated>2014-05-04T00:00:00+08:00</updated>
    <id>http://dreamrunner.org/blog/2014/05/04/浅谈设计模式15</id>
    <content type="html"><![CDATA[<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 实例</h2>
<div class="outline-text-2" id="text-1">
<p>
批萨店有不同种类的批萨，每种批萨的制作流程类似，如果每个批萨都创建一个类，并且在各自类中完成各自的制作，那么制作流程的代码就会重复，并且制作过程与对象本身融合在一起，那么如何把所有批萨类似的制作流程分离出来，并消除代码冗余呢？
</p>

<!-- more -->
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 生成器模式(Builder)</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1"><span class="section-number-3">2.1</span> 目的</h3>
<div class="outline-text-3" id="text-2-1">
<p>
把复杂对象的建造过程从它的表示中分离出来，使得同样的创建过程能创建不同表现的对象。
</p>
</div>
</div>

<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2"><span class="section-number-3">2.2</span> 实现</h3>
<div class="outline-text-3" id="text-2-2">
<p>
利用生成器模式，把批萨制作流程分离出来，从而不同批萨能使用同样的制作流程。<a href="https://github.com/shishougang/DesignPattern-CPP/tree/master/src/builder">代码实例在这里</a>。
</p>
</div>

<div id="outline-container-sec-2-2-1" class="outline-4">
<h4 id="sec-2-2-1"><span class="section-number-4">2.2.1</span> 批萨的基类</h4>
<div class="outline-text-4" id="text-2-2-1">
<p>
批萨的基类定义生成器可以配置不同的参数，从而达到同样的流程创建不同的对象。
</p>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00ffff;">class</span> <span style="color: #98fb98;">Pizza</span> {
 <span style="color: #00ffff;">public</span>:
  <span style="color: #87cefa;">Pizza</span>() {}
  <span style="color: #00ffff;">virtual</span> ~<span style="color: #87cefa;">Pizza</span>() {}
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">set_dough</span>(<span style="color: #98fb98;">string</span> <span style="color: #eedd82;">dough</span>) { dough_ = dough; }
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">set_sauce</span>(<span style="color: #98fb98;">string</span> <span style="color: #eedd82;">sauce</span>) { sauce_ = sauce; }
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">set_topping</span>(<span style="color: #98fb98;">string</span> <span style="color: #eedd82;">topping</span>) { topping_ = topping; }
};
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2-2-2" class="outline-4">
<h4 id="sec-2-2-2"><span class="section-number-4">2.2.2</span> 生成器抽象类</h4>
<div class="outline-text-4" id="text-2-2-2">
<p>
维护一个批萨的实例，并声明生成器制作接口。
</p>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00ffff;">class</span> <span style="color: #98fb98;">PizzaBuilder</span> {
 <span style="color: #00ffff;">public</span>:
  <span style="color: #00ffff;">virtual</span> ~<span style="color: #87cefa;">PizzaBuilder</span>() {}
  <span style="color: #98fb98;">Pizza</span>* <span style="color: #87cefa;">get_pizza</span>() { <span style="color: #00ffff;">return</span> pizza_; }
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">createPizza</span>() { pizza_ = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">Pizza</span>(); }
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">buildDough</span>() = 0;
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">buildSauce</span>() = 0;
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">buildTopping</span>() = 0;
 <span style="color: #00ffff;">protected</span>:
  <span style="color: #98fb98;">Pizza</span> *<span style="color: #eedd82;">pizza_</span>;
};
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-2-2-3" class="outline-4">
<h4 id="sec-2-2-3"><span class="section-number-4">2.2.3</span> Clam批萨的生成器</h4>
<div class="outline-text-4" id="text-2-2-3">
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00ffff;">class</span> <span style="color: #98fb98;">ClamPizzaBuilder</span> : <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">PizzaBuilder</span> {
 <span style="color: #00ffff;">public</span>:
  <span style="color: #00ffff;">virtual</span> ~<span style="color: #87cefa;">ClamPizzaBuilder</span>() {}
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">buildDough</span>() { pizza_-&gt;set_dough(<span style="color: #ffa07a;">"thinCrust"</span>); }
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">buildSauce</span>() { pizza_-&gt;set_sauce(<span style="color: #ffa07a;">"marinaSauce"</span>); }
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">buildTopping</span>() { pizza_-&gt;set_topping(<span style="color: #ffa07a;">"pepperoni"</span>); }
};
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-2-2-4" class="outline-4">
<h4 id="sec-2-2-4"><span class="section-number-4">2.2.4</span> Cheese批萨的生成器</h4>
<div class="outline-text-4" id="text-2-2-4">
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00ffff;">class</span> <span style="color: #98fb98;">CheesePizzaBuilder</span> : <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">PizzaBuilder</span> {
 <span style="color: #00ffff;">public</span>:
  <span style="color: #00ffff;">virtual</span> ~<span style="color: #87cefa;">CheesePizzaBuilder</span>() {}
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">buildDough</span>() { pizza_-&gt;set_dough(<span style="color: #ffa07a;">"thickCrust"</span>); }
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">buildSauce</span>() { pizza_-&gt;set_sauce(<span style="color: #ffa07a;">"plumTomato"</span>); }
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">buildTopping</span>() { pizza_-&gt;set_topping(<span style="color: #ffa07a;">"pineapple"</span>); }
};
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2-2-5" class="outline-4">
<h4 id="sec-2-2-5"><span class="section-number-4">2.2.5</span> <code>Waiter</code> 制作批萨</h4>
<div class="outline-text-4" id="text-2-2-5">
<p>
维护一个不同批萨生成器的实例，通过不同生成器和同样的流程制作批萨，达到制作和产品本身的分离。
</p>

<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00ffff;">class</span> <span style="color: #98fb98;">Waiter</span> {
 <span style="color: #00ffff;">public</span>:
  <span style="color: #00ffff;">virtual</span> ~<span style="color: #87cefa;">Waiter</span>();
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">set_pizza_builder</span>(<span style="color: #98fb98;">PizzaBuilder</span> *<span style="color: #eedd82;">pizza_builder</span>) {
    pizza_builder_ = pizza_builder;
  }
  <span style="color: #98fb98;">Pizza</span>* <span style="color: #87cefa;">get_pizza</span>() { <span style="color: #00ffff;">return</span> pizza_builder_-&gt;get_pizza(); }
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">constructPizza</span>();
 <span style="color: #00ffff;">private</span>:
  <span style="color: #98fb98;">PizzaBuilder</span> *<span style="color: #eedd82;">pizza_builder_</span>;
};

<span style="color: #98fb98;">void</span> <span style="color: #7fffd4;">Waiter</span>::<span style="color: #87cefa;">constructPizza</span>() {
  pizza_builder_-&gt;createPizza();
  pizza_builder_-&gt;buildDough();
  pizza_builder_-&gt;buildSauce();
  pizza_builder_-&gt;buildTopping();
}
</pre>
</div>
</div>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 总结</h2>
<div class="outline-text-2" id="text-3">
</div><div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> 生成器模式(Builder)结构</h3>
<div class="outline-text-3" id="text-3-1">
<img src="/images/blog/2014/builder/builder_structure.jpeg">
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> 组成</h3>
<div class="outline-text-3" id="text-3-2">
<ul class="org-ul">
<li>生成器（Builder）为创建产品（Product）对象的部分指定一个抽象接口。
</li>
<li>具体生成器（ConcreteBuilder）
<ol class="org-ol">
<li>实现生成器（Builder)的接口以构造和装配该产品(Product)的各个部件。
</li>
<li>定义并明确它所创建的表示。
</li>
<li>提供一个检索产品的接口
</li>
</ol>
</li>
<li>管理者（Director）构造一个使用Builder接口的对象
</li>
<li>产品类（Product）
<ol class="org-ol">
<li>表示被构造的复杂对象。ConcreateBuilder创建该产品的内部表示并定义它的装配过程。
</li>
<li>包含定义组成部件的类，包括将这些部件装配成最终产品的接口。
</li>
</ol>
</li>
</ul>
</div>
</div>
<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3"><span class="section-number-3">3.3</span> 应用场景</h3>
<div class="outline-text-3" id="text-3-3">
<ul class="org-ul">
<li>当创建复杂对象的算法应该独立于该对象的组成部分以及它们的装配方式时；
</li>
<li>当构造过程必须允许被构造的对象有不同的表示时。
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-3-4" class="outline-3">
<h3 id="sec-3-4"><span class="section-number-3">3.4</span> 缺点</h3>
</div>
</div>
]]></content>
  </entry>
  
</feed>
