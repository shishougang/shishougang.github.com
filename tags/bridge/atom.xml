<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Bridge | (learn&think)]]></title>
  <link href="http://dreamrunner.org/tags/bridge/atom.xml" rel="self"/>
  <link href="http://dreamrunner.org/"/>
  <updated>2014-06-04T22:59:20+08:00</updated>
  <id>http://dreamrunner.org/</id>
  <author>
    <name><![CDATA[DreamRunner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[浅谈设计模式十七: 桥接模式(Bridge)]]></title>
    <link href="http://dreamrunner.org/blog/2014/05/04/%E6%B5%85%E8%B0%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F17/"/>
    <updated>2014-05-04T00:00:00+08:00</updated>
    <id>http://dreamrunner.org/blog/2014/05/04/浅谈设计模式17</id>
    <content type="html"><![CDATA[<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 实例</h2>
<div class="outline-text-2" id="text-1">
<p>
画圆可以顺时针或逆时针，但只能使用一种方法，不能同时既顺时针又逆时针。比较直观的做法就是定义两种不同的圆，但同时继承于圆的基本特性基类。但如果不采用继承并在运行时选取画圆的方法呢？
</p>

<!-- more -->
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 桥接模式(Bridge)</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1"><span class="section-number-3">2.1</span> 目的</h3>
<div class="outline-text-3" id="text-2-1">
<p>
从对象的具体实现中解藕出抽象部分，使它们可以各自独立的变化。
</p>
</div>
</div>

<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2"><span class="section-number-3">2.2</span> 实现</h3>
<div class="outline-text-3" id="text-2-2">
<p>
把顺时针和逆时针的画法抽取出来成为独立的实现者类，由圆运行时可以选取自己的画法。<a href="https://github.com/shishougang/DesignPattern-CPP/tree/master/src/bridge">代码实例在这里</a>。
</p>
</div>

<div id="outline-container-sec-2-2-1" class="outline-4">
<h4 id="sec-2-2-1"><span class="section-number-4">2.2.1</span> 定义实现者抽象接口</h4>
<div class="outline-text-4" id="text-2-2-1">
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00ffff;">class</span> <span style="color: #98fb98;">Drawing</span> {
 <span style="color: #00ffff;">public</span>:
  <span style="color: #00ffff;">virtual</span> ~<span style="color: #87cefa;">Drawing</span>() {}
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">drawCircle</span>(<span style="color: #98fb98;">double</span> <span style="color: #eedd82;">x</span>, <span style="color: #98fb98;">double</span> <span style="color: #eedd82;">y</span>, <span style="color: #98fb98;">double</span> <span style="color: #eedd82;">radius</span>) = 0;
};
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2-2-2" class="outline-4">
<h4 id="sec-2-2-2"><span class="section-number-4">2.2.2</span> 顺时针实现类</h4>
<div class="outline-text-4" id="text-2-2-2">
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00ffff;">class</span> <span style="color: #98fb98;">DrawingClockwise</span> : <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">Drawing</span> {
 <span style="color: #00ffff;">public</span>:
  <span style="color: #00ffff;">virtual</span> ~<span style="color: #87cefa;">DrawingClockwise</span>() {}
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">drawCircle</span>(<span style="color: #98fb98;">double</span> <span style="color: #eedd82;">x</span>, <span style="color: #98fb98;">double</span> <span style="color: #eedd82;">y</span>, <span style="color: #98fb98;">double</span> <span style="color: #eedd82;">radius</span>) {
    printf(<span style="color: #ffa07a;">"draw the circle at %f,%f, radius %f by clockwise\n"</span>, x, y, radius);
  }
};
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2-2-3" class="outline-4">
<h4 id="sec-2-2-3"><span class="section-number-4">2.2.3</span> 逆时针实现类</h4>
<div class="outline-text-4" id="text-2-2-3">
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00ffff;">class</span> <span style="color: #98fb98;">DrawingCounterClockwise</span> : <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">Drawing</span> {
 <span style="color: #00ffff;">public</span>:
  <span style="color: #00ffff;">virtual</span> ~<span style="color: #87cefa;">DrawingCounterClockwise</span>() {}
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">drawCircle</span>(<span style="color: #98fb98;">double</span> <span style="color: #eedd82;">x</span>, <span style="color: #98fb98;">double</span> <span style="color: #eedd82;">y</span>, <span style="color: #98fb98;">double</span> <span style="color: #eedd82;">radius</span>) {
    printf(<span style="color: #ffa07a;">"draw the circle at %f,%f, radius %f by counter clockwise\n"</span>,
           x, y, radius);
  }
};
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2-2-4" class="outline-4">
<h4 id="sec-2-2-4"><span class="section-number-4">2.2.4</span> 圆类</h4>
<div class="outline-text-4" id="text-2-2-4">
<p>
维护一个实现者的实例并使用它完成相应的行为。
</p>

<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00ffff;">class</span> <span style="color: #98fb98;">CircleShape</span> : <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">Shape</span> {
 <span style="color: #00ffff;">public</span>:
  <span style="color: #00ffff;">virtual</span> ~<span style="color: #87cefa;">CircleShape</span>();
  <span style="color: #87cefa;">CircleShape</span>(<span style="color: #98fb98;">double</span> <span style="color: #eedd82;">x</span>, <span style="color: #98fb98;">double</span> <span style="color: #eedd82;">y</span>, <span style="color: #98fb98;">double</span> <span style="color: #eedd82;">radius</span>, <span style="color: #98fb98;">Drawing</span> *<span style="color: #eedd82;">drawing</span>);
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">draw</span>();
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">resizeByPercentage</span>(<span style="color: #98fb98;">double</span> <span style="color: #eedd82;">pct</span>);
 <span style="color: #00ffff;">private</span>:
  <span style="color: #98fb98;">double</span> <span style="color: #eedd82;">x_</span>;
  <span style="color: #98fb98;">double</span> <span style="color: #eedd82;">y_</span>;
  <span style="color: #98fb98;">double</span> <span style="color: #eedd82;">radius_</span>;
  <span style="color: #98fb98;">Drawing</span> *<span style="color: #eedd82;">drawing_</span>;
};

<span style="color: #98fb98;">void</span> <span style="color: #7fffd4;">CircleShape</span>::<span style="color: #87cefa;">draw</span>() {
    drawing_-&gt;drawCircle(x_, y_, radius_);
}
</pre>
</div>
</div>
</div>
</div>
</div>
<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 总结</h2>
<div class="outline-text-2" id="text-3">
</div><div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> 桥接模式(Bridge)结构</h3>
<div class="outline-text-3" id="text-3-1">
<img src="/images/blog/2014/bridge/bridge_structure.jpeg">
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> 组成</h3>
<div class="outline-text-3" id="text-3-2">
<ul class="org-ul">
<li>抽象类（Abstraction）
<ol class="org-ol">
<li>定义抽象的接口。
</li>
<li>维护一个指向实现类（Implementor）类型的对象的引用。
</li>
</ol>
</li>
<li>精炼抽象类（Refined Abstraction）扩展抽象类定义的接口。
</li>
<li>抽象实现者（Implementor）为实现类定义接口。这个接口没有必要和抽象类（Abstraction）的接口相一致。实际上这两个接口可以很不同。典型的抽象实现类接口只提供原始操作，然而抽象类基于这些原始操作定义上层操作。
</li>
<li>具体实现类（ConcreteImplementor）实现抽象实现类（Implementor）接口。
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3"><span class="section-number-3">3.3</span> 应用场景</h3>
<div class="outline-text-3" id="text-3-3">
<ul class="org-ul">
<li>当你想避免抽象部分和它的实现部分永久的绑定时。例如，可能这样的情况，当实现部分必须在运行时被选取或换出。
</li>
<li>抽象部分和它们的实现部分都需要能被子类扩展时。在这种情况，桥接模式让你组合不同的抽象部分和实现部分并可独立扩展它们。
</li>
<li>当改变抽象的实现部分对客户没有任何影响时，也就是，客户的代码不需要重新编译。
</li>
<li>（C++）你想从客户那完全隐藏抽象的实现部分.在C++中，类的表现在类的接口里可以看到。
</li>
<li>你有一堆激增的类时。如此类的层次表明需要把对象分离成两部分。
</li>
<li>当你想在多个对象见共享一个实现部分（可能使用引用计数），并想把这个事实从客户那隐藏掉时。
</li>
</ul>
</div>
</div>
</div>
]]></content>
  </entry>
  
</feed>
