<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Facade | (learn&think)]]></title>
  <link href="http://dreamrunner.org/tags/facade/atom.xml" rel="self"/>
  <link href="http://dreamrunner.org/"/>
  <updated>2014-08-25T20:31:18+08:00</updated>
  <id>http://dreamrunner.org/</id>
  <author>
    <name><![CDATA[DreamRunner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[浅谈设计模式九: 外观模式(Facade)]]></title>
    <link href="http://dreamrunner.org/blog/2014/05/03/%E6%B5%85%E8%B0%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F9/"/>
    <updated>2014-05-03T00:00:00+08:00</updated>
    <id>http://dreamrunner.org/blog/2014/05/03/浅谈设计模式9</id>
    <content type="html"><![CDATA[<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 实例</h2>
<div class="outline-text-2" id="text-1">
<p>
在家组建了一个家庭影院，基本配置如下图。每次看电影都要进行如下一系列准备工作：
</p>
<ol class="org-ol">
<li>打开爆米花机
</li>
<li>爆米花机制作爆米花
</li>
<li>调暗灯光
</li>
<li>投影幕布降下来
</li>
<li>打开投影机
</li>
</ol>
<p>
。。。等等
</p>

<p>
至少在10项的准备工作，如果每次一一去调用，非常的繁琐，那么如何让用户方便而简洁的准备看电影，并看完电影善后等活动呢？
</p>
<img src="/images/blog/2014/facade/home_theater.jpeg">

<!-- more -->
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 外观模式(Facade)</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1"><span class="section-number-3">2.1</span> 目的</h3>
<div class="outline-text-3" id="text-2-1">
<p>
为子系统的一系列接口提供一个统一的接口。外观模式（Facade）定义一个高层接口来使子系统更易使用。
</p>
</div>
</div>

<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2"><span class="section-number-3">2.2</span> 实现</h3>
<div class="outline-text-3" id="text-2-2">
<p>
建立外观类 <code>HomeTheaterFacade</code> ，拥有各个子系统（ <code>Amplifier</code> ，
<code>Tuner</code> 等等）的引用，创建 <code>watchMovie</code> ， <code>endMovie</code> 等函数操作，每个函数负责完成一系列对子系统的操作。<a href="https://github.com/shishougang/DesignPattern-CPP/tree/master/src/facade">代码实例在这里</a>。
</p>

<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00ffff;">class</span> <span style="color: #98fb98;">HomeTheaterFacade</span> {
 <span style="color: #00ffff;">public</span>:
  <span style="color: #87cefa;">HomeTheaterFacade</span>(<span style="color: #98fb98;">Amplifier</span>* <span style="color: #eedd82;">amp</span>, <span style="color: #98fb98;">Tuner</span>* <span style="color: #eedd82;">tuner</span>, <span style="color: #98fb98;">DvdPlayer</span>* <span style="color: #eedd82;">dvd</span>, <span style="color: #98fb98;">CdPlayer</span>* <span style="color: #eedd82;">cd</span>,
                    <span style="color: #98fb98;">Projector</span>* <span style="color: #eedd82;">projector</span>, <span style="color: #98fb98;">Screen</span>* <span style="color: #eedd82;">screen</span>, <span style="color: #98fb98;">TheaterLights</span>*
                    <span style="color: #eedd82;">lights</span>, <span style="color: #98fb98;">PopcornPopper</span>* <span style="color: #eedd82;">popper</span>);
  <span style="color: #00ffff;">virtual</span> ~<span style="color: #87cefa;">HomeTheaterFacade</span>();
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">watchMovie</span>(<span style="color: #98fb98;">string</span> <span style="color: #eedd82;">movie</span>);
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">endMovie</span>();
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">listenToCd</span>(<span style="color: #98fb98;">string</span> <span style="color: #eedd82;">cd_title</span>);
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">endCd</span>();
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">listenToRadio</span>(<span style="color: #98fb98;">double</span> <span style="color: #eedd82;">frequency</span>);
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">endRadio</span>();
 <span style="color: #00ffff;">private</span>:
  <span style="color: #98fb98;">Amplifier</span>* <span style="color: #eedd82;">amp_</span>;
  <span style="color: #98fb98;">Tuner</span>* <span style="color: #eedd82;">tuner_</span>;
  <span style="color: #98fb98;">DvdPlayer</span>* <span style="color: #eedd82;">dvd_</span>;
  <span style="color: #98fb98;">CdPlayer</span>* <span style="color: #eedd82;">cd_</span>;
  <span style="color: #98fb98;">Projector</span>* <span style="color: #eedd82;">projector_</span>;
  <span style="color: #98fb98;">TheaterLights</span>* <span style="color: #eedd82;">lights_</span>;
  <span style="color: #98fb98;">Screen</span>* <span style="color: #eedd82;">screen_</span>;
  <span style="color: #98fb98;">PopcornPopper</span>* <span style="color: #eedd82;">popper_</span>;
};

<span style="color: #98fb98;">void</span> <span style="color: #7fffd4;">HomeTheaterFacade</span>::<span style="color: #87cefa;">watchMovie</span>(<span style="color: #98fb98;">string</span> <span style="color: #eedd82;">movie</span>) {
  cout &lt;&lt; <span style="color: #ffa07a;">"Get ready to wath a movie..."</span> &lt;&lt; endl;
  popper_-&gt;on();
  popper_-&gt;pop();
  lights_-&gt;dim(10);
  screen_-&gt;down();
  projector_-&gt;on();
  projector_-&gt;wideScreenMode();
  amp_-&gt;on();
  amp_-&gt;setDvd(dvd_);
  amp_-&gt;setSurroundSound();
  amp_-&gt;setVolume(5);
  dvd_-&gt;on();
  dvd_-&gt;play(movie);
}

<span style="color: #98fb98;">void</span> <span style="color: #7fffd4;">HomeTheaterFacade</span>::<span style="color: #87cefa;">endMovie</span>() {
  cout &lt;&lt; <span style="color: #ffa07a;">"Shutting movie theater down..."</span> &lt;&lt; endl;
  popper_-&gt;off();
  lights_-&gt;on();
  screen_-&gt;up();
  projector_-&gt;off();
  amp_-&gt;off();
  dvd_-&gt;stop();
  dvd_-&gt;eject();
  dvd_-&gt;off();
}
</pre>
</div>
<p>
总的框架如下：
</p>
<img src="/images/blog/2014/facade/home_theater_structure.jpeg">
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 总结</h2>
<div class="outline-text-2" id="text-3">
</div><div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> 外观模式(Facade)结构</h3>
<div class="outline-text-3" id="text-3-1">
<img src="/images/blog/2014/facade/facade_structure.jpeg">
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> 组成</h3>
<div class="outline-text-3" id="text-3-2">
<ul class="org-ul">
<li>外观对象（Facade)
<ol class="org-ol">
<li>知道哪个子系统类负责哪个请求。
</li>
<li>授权客户的请求给相应的子系统对象。
</li>
</ol>
</li>
<li>子系统类（subsystem classes）
<ol class="org-ol">
<li>实现子系统的功能。
</li>
<li>处理Facade对象交托的任务。
</li>
<li>对facade一点也不知道，也就是它们没有对它的引用。
</li>
</ol>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3"><span class="section-number-3">3.3</span> 应用场景</h3>
<div class="outline-text-3" id="text-3-3">
<ul class="org-ul">
<li>你想给一个复杂的子系统提供一个简单的接口。随着子系统不断扩展，它们变得越来越复杂。当大多数设计模式被应用导致越来越多的更小的类。这使得子系统更易重用和更易定制。但是对不想定制它的客户来说，它也变得更难使用。一个外观对象能提供一个简单默认的子系统外观，但也足以好对大多数客户来说。只有需要更多定制化的客户需求不满足外观对象提供的。
</li>
<li>在客户和实现抽象接口的具体类之间存在很多的依赖。引入外观模式把子系统从客户和其他子系统那解藕出来，从而提高子系统的独立性和移植性。
</li>
<li>你想对你的子系统分层。使用外观模式为每层子系统定义一个进入点。如果子系统是依赖的，那么你能通过使得它们之间的通信仅仅通过它们的外观对象来简化它们之间的依赖性。
</li>
</ul>
</div>
</div>
</div>
]]></content>
  </entry>
  
</feed>
