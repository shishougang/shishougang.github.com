
#+begin_html
---
layout: post
title: "浅谈设计模式十: 模板方法模式(Template method)"
date: 2014-05-04
comments: true
categories: [Design Pattern]
tags: [Design Pattern, C++, Template method]
---
#+end_html
#+OPTIONS: toc:nil

* 实例
有些人喜欢喝茶，有些人喜欢喝咖啡，所以现在有咖啡和茶两个类，基本代码如
下：

=Coffee= 类：
#+begin_src c++
  class Coffee {
   public:
    virtual ~Coffee();
    void prepareRecipe();
   protected:
    void boilWater();
    void brewCoffeeGrinds();
    void pourInCup();
    void addSugarAndMilk();
  };
#+end_src

=Tea= 类：
#+begin_src c++
  class Tea {
   public:
    virtual ~Tea();
    void prepareRecipe();
   protected:
    void boilWater();
    void steepTeaBag();
    void pourInCup();
    void addLemon();
  };
#+end_src

我们发现代码有重复： =void boilWater()= 和 =void pourInCup()= 。那么如
何整合代码消除重复代码呢？

#+begin_html
<!-- more -->
#+end_html

* 模板方法模式(Template method)
** 目的
为操作中的算法定义一个构架，把一些步骤延迟到子类来完成。模板方法让子类
能不改变算法框架的前提下重定义这算法的一些步骤。
** 实现
[[https://github.com/shishougang/DesignPattern-CPP/tree/master/src/templatemethod][代码实例在这里]]。
*** 提取不变，抽象变化
提取出不变的地方，在基类类定义并实现，然子类共同拥有，抽象变化地方为抽
象接口，延迟到让子类来实现。

#+begin_html
{% img /images/blog/2014/templatemethod/compare_class.jpeg %}
#+end_html

#+begin_src c++
class CaffeineBeverage {
 public:
  virtual ~CaffeineBeverage();
  void prepareRecipe();
 protected:
  void boilWater();
  void pourInCup();
  virtual void brew() = 0;
  virtual void addCondiments() = 0;
};
#+end_src
*** =Coffee= 类实现自己功能
=Coffee= 类继承基类 =CaffeineBeverage= ，并实现抽象接口来完成自己的算
法功能。

#+begin_src c++
class Coffee : public CaffeineBeverage {
 public:
  virtual ~Coffee();
 protected:
  virtual void brew();
  virtual void addCondiments();
};

void Coffee::brew() {
  cout << "Dripping Coffee through filter" << endl;
}

void Coffee::addCondiments() {
  cout << "Adding Sugar and Milk" << endl;
}
#+end_src
*** =Tea= 类实现自己功能
=Tea= 类继承基类 =CaffeineBeverage= ，并实现抽象接口来完成自己的算
法功能。

#+begin_src c++
class Tea : public CaffeineBeverage {
 public:
  virtual ~Tea();
 protected:
  virtual void brew();
  virtual void addCondiments();
};

void Tea::brew() {
  cout << "Steeping the tea" << endl;
}

void Tea::addCondiments() {
  cout << "Adding Lemon" << endl;
}
#+end_src
*** 总的模式设计
#+begin_html
{% img /images/blog/2014/templatemethod/template_whole.jpeg %}
#+end_html
* 总结
** 模板方法模式(Template method)结构
#+begin_html
{% img /images/blog/2014/templatemethod/template_method_structure.jpg %}
#+end_html
** 组成
+ 抽象类（AbstractClass）
  1. 定义抽象的原语操作，具体子类将重定义它们来实现算法的步骤。
  2. 实现一个模板方法定义一个算法的构架。模板方法调用原语操作和抽象类
     或其他对象定义的操作。
+ 具体类（ConcreteClass）
  实现原语操作来执行算法中子类特有的步骤。

** 应用场景
+ 一次性实现一个算法的不变部分，把变化部分留给子类去实现。
+ 各子类间的共同行为需要被提取并集中到一个共同的类中来避免代码的重复。
  你首先识别出这些现有代码的不同之处，然后把这些不同之处分离到新的操作
  中。最后，你用一个模板方法调用这些新操作之一来替代原有那些不同的代码。
+ 控制子类扩展。你能定义一个只在特定点调用 =hook= 操作的模板方法，以此
  只允许子类在这些点扩展。
