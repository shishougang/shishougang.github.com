<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Design Pattern | (learn&think)]]></title>
  <link href="http://shishougang.github.com/blog/categories/design-pattern/atom.xml" rel="self"/>
  <link href="http://shishougang.github.com/"/>
  <updated>2014-05-03T13:37:27+08:00</updated>
  <id>http://shishougang.github.com/</id>
  <author>
    <name><![CDATA[DreamRunner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[浅谈设计模式一: 策略模式(Strategy)]]></title>
    <link href="http://shishougang.github.com/blog/2014/05/03/%E6%B5%85%E8%B0%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F1/"/>
    <updated>2014-05-03T00:00:00+08:00</updated>
    <id>http://shishougang.github.com/blog/2014/05/03/浅谈设计模式1</id>
    <content type="html"><![CDATA[<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 实例</h2>
<div class="outline-text-2" id="text-1">
<p>
有一个模拟鸭子的应用完成。这个应用可以仿真鸭子的各种活动，比如游泳，鸣叫，飞等等。能马上想到的模式设计如下：
</p>


<div class="figure">
<p><img src="file:///images/blog/2014/strategy/duck1.jpeg" alt="duck1.jpeg" />
</p>
</div>

<p>
一个基类 <code>Duck</code> 定义Duck的一些特性，子类继承它的特性，并覆盖它的部分特性。至此没什么问题。子类共同拥有父类的特性，消除了代码的重复性。
</p>

<p>
然后想让 <code>Duck</code> 具有有 <code>fly()</code> 的特性，把它加到父类中，相应的不同
duck(子类）如果不具备 或 <code>fly()</code> 或 <code>quack</code> 的特性,那么就去覆盖父类相应的特性。
</p>

<p>
<img src="file:///images/blog/2014/strategy/duck2.jpeg" alt="duck2.jpeg" />
<img src="file:///images/blog/2014/strategy/duck3.jpeg" alt="duck3.jpeg" />
<img src="file:///images/blog/2014/strategy/duck4.jpeg" alt="duck4.jpeg" />
</p>

<p class="info">
每增加一个不同的子类 duck，如果没有父类相应的特性都要去覆盖它，很冗余。
</p>

<p>
那么如果把不变的特性继续放在基类 <code>Duck</code> 里，而把变化的特性拿出来做成独立的接口呢？
<img src="file:///images/blog/2014/strategy/duck5.jpeg" alt="duck5.jpeg" />
</p>

<p class="info">
1. 增加代码的冗余性，每个子类duck都要去实现部分相同的特性;2. 想更改一个相同的 fly() 特性，要在相应的所有子类都修改
</p>

<!-- more -->
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 策略模式(Strategy)</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1"><span class="section-number-3">2.1</span> 目的</h3>
<div class="outline-text-3" id="text-2-1">
<p>
定义一组算法，分别封装每一个，并使它们能互换。策略模式(Strategy)使得对象独立的变化使用这组算法。
</p>
</div>
</div>

<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2"><span class="section-number-3">2.2</span> 实现</h3>
<div class="outline-text-3" id="text-2-2">
<p>
如何使得不同子类的duck，<a href="https://github.com/shishougang/DesignPattern-CPP/tree/master/src/strategy">参考代码</a>。
</p>
<ol class="org-ol">
<li>具有自己的行为特性;
</li>
<li>能复用代码，不同的duck能共享相同行为特性代码，不造成代码的冗余;
</li>
<li>易于后期特性的更改，不会造成修改一个行为特性，要修改很多处，并易于扩张的新的行为特性
</li>
</ol>
</div>
<div id="outline-container-sec-2-2-1" class="outline-4">
<h4 id="sec-2-2-1"><span class="section-number-4">2.2.1</span> 分离出那些变化的行为</h4>
<div class="outline-text-4" id="text-2-2-1">
<p>
这里 <code>fly()</code> 和 <code>quack()</code> 行为在不同duck类中变化。 把它们做成一个话的接口(面向接口编程而不是实现)。C++中定义一个虚类，其他不同的行为类继承这个类并实现这个虚类中的虚函数接口（Java是实现这个接口）。基本如下：
</p>


<div class="figure">
<p><img src="file:///images/blog/2014/strategy/duck_behavior.jpeg" alt="duck_behavior.jpeg" />
</p>
</div>

<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00ffff;">class</span> <span style="color: #98fb98;">FlyBehavior</span> {
 <span style="color: #00ffff;">public</span>:
  <span style="color: #00ffff;">virtual</span> ~<span style="color: #87cefa;">FlyBehavior</span>() {}
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">fly</span>() = 0;
};

<span style="color: #00ffff;">class</span> <span style="color: #98fb98;">FlyNoWay</span> : <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">FlyBehavior</span> {
 <span style="color: #00ffff;">public</span>:
  <span style="color: #87cefa;">FlyNoWay</span>() {}
  <span style="color: #00ffff;">virtual</span> ~<span style="color: #87cefa;">FlyNoWay</span>() {}
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">fly</span>();
};

<span style="color: #00ffff;">class</span> <span style="color: #98fb98;">FlyWithWings</span> : <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">FlyBehavior</span> {
 <span style="color: #00ffff;">public</span>:
  <span style="color: #00ffff;">virtual</span> ~<span style="color: #87cefa;">FlyWithWings</span>() {}
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">fly</span>();
};
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2-2-2" class="outline-4">
<h4 id="sec-2-2-2"><span class="section-number-4">2.2.2</span> 整合到Duck类里</h4>
<div class="outline-text-4" id="text-2-2-2">
<p>
关键处在：现在Duck委托（delegate）它的 <code>flying</code> 和 <code>quacking</code> 行为，而不是直接使用类或子类里它们的方法。
</p>


<div class="figure">
<p><img src="file:///images/blog/2014/strategy/duck_class.jpeg" alt="duck_class.jpeg" />
</p>
</div>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00ffff;">class</span> <span style="color: #98fb98;">Duck</span> {
 <span style="color: #00ffff;">public</span>:
  <span style="color: #87cefa;">Duck</span>(<span style="color: #98fb98;">void</span>);
  <span style="color: #00ffff;">virtual</span> ~<span style="color: #87cefa;">Duck</span>();
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">display</span>() = 0;
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">swim</span>();
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">set_fly_behavior</span>(<span style="color: #98fb98;">FlyBehavior</span> *<span style="color: #eedd82;">fly_behavior</span>);
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">set_quack_behavior</span>(<span style="color: #98fb98;">QuackBehavior</span> *<span style="color: #eedd82;">quack_behavior</span>);
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">performFly</span>();
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">performQuack</span>();
 <span style="color: #00ffff;">protected</span>:
  <span style="color: #98fb98;">FlyBehavior</span> *<span style="color: #eedd82;">fly_behavior_</span>;
  <span style="color: #98fb98;">QuackBehavior</span> *<span style="color: #eedd82;">quack_behavior_</span>;
};
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2-2-3" class="outline-4">
<h4 id="sec-2-2-3"><span class="section-number-4">2.2.3</span> 子类Duck各自拥有自己的行为，并用 <code>set_xx_behavior</code> 动态改变行为</h4>
<div class="outline-text-4" id="text-2-2-3">
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #7fffd4;">DecoyDuck</span>::<span style="color: #87cefa;">DecoyDuck</span>() {
  fly_behavior_ = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">FlyNoWay</span>;
  quack_behavior_ = <span style="color: #00ffff;">new</span> <span style="color: #98fb98;">MuteQuack</span>;
}
</pre>
</div>

<div class="org-src-container">

<pre class="src src-c++">model-&gt;performFly();
model-&gt;set_fly_behavior(<span style="color: #00ffff;">new</span> <span style="color: #98fb98;">FlyRocketPowered</span>);
model-&gt;performFly();
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2-2-4" class="outline-4">
<h4 id="sec-2-2-4"><span class="section-number-4">2.2.4</span> 总的框架</h4>
<div class="outline-text-4" id="text-2-2-4">

<div class="figure">
<p><img src="file:///images/blog/2014/strategy/duck_summarize.jpeg" alt="duck_summarize.jpeg" />
</p>
</div>
</div>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 总结</h2>
<div class="outline-text-2" id="text-3">
</div><div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> 策略模式(Strategy)结构</h3>
<div class="outline-text-3" id="text-3-1">

<div class="figure">
<p><img src="file:///images/blog/2014/strategy/strategy_structure.jpg" alt="strategy_structure.jpg" />
</p>
</div>
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> 组成</h3>
<div class="outline-text-3" id="text-3-2">
<ul class="org-ul">
<li>策略类（Strategy)
声明一个所有算法都支持的公共接口。场景(Context)利用这个接口来调用具体策略类（ConcreteStrategy）实现的算法。
</li>
<li>具体策略类（ConcreteStrategy)
用策略类接口实现自己的酸饭。
</li>
<li>场景（Context）
<ol class="org-ol">
<li>被具体策略对象配置。
</li>
<li>维持一个策略对象的引用。
</li>
<li>可能定义一个让策略对象获取它的数据的接口。
</li>
</ol>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3"><span class="section-number-3">3.3</span> 应用场景</h3>
<div class="outline-text-3" id="text-3-3">
<p>
使用策略模式当
</p>
<ol class="org-ol">
<li>很多相关的类只是不同于它们的行为。策略提供了一种能使用多种行为中一种来配置类的方法。
</li>
<li>当你需要一种算法的不同变体。比如，你可能定义一组算法来发表达不同时间/空间的权衡。当这些变体实现为一个算法的类层次时，能使用策略模式。
</li>
<li>算法使用用户不应但知道的数据。使用策略模式来避免暴露复杂，于算法相关的数据结构。
</li>
<li>一个类定义了很多行为，而这些行为有许多条件分支语句在它们的行为中。与其很多条件分支，把相关的条件分支移出到它们各自的策略类中。
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-3-4" class="outline-3">
<h3 id="sec-3-4"><span class="section-number-3">3.4</span> 缺点</h3>
<div class="outline-text-3" id="text-3-4">
<ol class="org-ol">
<li>用户必须意识不同的策略。这个模式的潜在缺点是，用户在使用不同策略前，必须知道如何的不同。实现问题可能暴露给用户。所以你使用策略模式仅当行为的变体于用户相关。
</li>
<li>Strategy和Context之间的通信开销。Strategy的接口被所有具体策略类所共有，无论这些类实现的算法简单还是复杂。所以会这样，一些具体策略类不会使用所有通过这个接口传递给他们的信息，简单的具体策略类可能根本用不到任何信息。这意味着，有时候当Context创建和初始化的参数将永远得不到使用。如果这是个问题，你将需要在Strategy和Context之间进行更紧密的耦合。
</li>
<li>增加策略类。各种策略类增加了应用的对象数量。有时，你可以将策略类实现为让Context共享的无状态对象来减少这开销。任何潜在的状态由Context
维持，当调用Strategy时，把它传递过去。共享的策略类不应该在每次调用间维持状态。
</li>
</ol>
</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[浅谈设计模式]]></title>
    <link href="http://shishougang.github.com/blog/2014/05/03/%E6%B5%85%E8%B0%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <updated>2014-05-03T00:00:00+08:00</updated>
    <id>http://shishougang.github.com/blog/2014/05/03/浅谈设计模式</id>
    <content type="html"><![CDATA[<p>
读完GOF的<a href="http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612/ref=sr_1_1?ie=UTF8&amp;qid=1394635442&amp;sr=8-1&amp;keywords=Design+Patterns">Design Patterns: Elements of Reusable Object-Oriented
Software</a>和图文并茂的<a href="http://www.amazon.com/First-Design-Patterns-Elisabeth-Freeman/dp/0596007124/ref=sr_1_2?ie=UTF8&amp;qid=1394635442&amp;sr=8-2&amp;keywords=Design+Patterns">Head First Design Patterns</a>，一时并不是那么快消化和理解，所以试着用自己的语言总结一下。
</p>

<p>
《Design Patterns》在Introduction章中"如何选一种模式设计"一节中给出了一张表格，5个创建模式（Abstract Factory; Builder; Factory Method;
Prototype; Singleton)，7个结构模式(Adapter; Bridge; Compose;
Decorator; Facade; Flyweight; Proxy)和11个行为模式（Chain of
Responsibility; Command; Interpreter; Iterator; Mediator; Memento;
Observer; State; Strategy; Template Method; Visitor)。
</p>

<!-- more -->

<p>
设计模式提倡：
</p>
<ol class="org-ol">
<li>面向接口编程而不是实现；
</li>
<li>使用组合优于继承;
</li>
<li>程序模块低耦合,高内聚
</li>
<li>独立出变化部分，适应后期变化
</li>
</ol>

<p>
设计模式并不是只局限OO中，主要理解设计模式的思想，但它也引入了一定的复杂度，不要烂用设计模式，宗旨是写简单而清晰的代码。
</p>

<p>
The best way to learn to write simple code is to write simple code!
Patterns, like all forms of compexity, should be avoided until they
are absolutely necessary. That's the first thing beginners need to
learn. Not the last thing.<sup><a id="fnr.1" name="fnr.1" class="footref" href="#fn.1">1</a></sup>
</p>

<p>
所有例子的代码在<a href="https://github.com/shishougang/DesignPattern-CPP">这里</a>。
</p>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" name="fn.1" class="footnum" href="#fnr.1">1</a></sup> <p class="footpara">
<a href="http://blog.codinghorror.com/head-first-design-patterns/">http://blog.codinghorror.com/head-first-design-patterns/</a>
</p></div>


</div>
</div>
]]></content>
  </entry>
  
</feed>
