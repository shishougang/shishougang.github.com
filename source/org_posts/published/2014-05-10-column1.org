
#+begin_html
---
layout: post
title: "Programming Pearls: Column1"
date: 2014-05-10
comments: true
categories: [Programming Pearls]
tags: [Programming Pearls]
---
#+end_html
#+OPTIONS: toc:nil

* Book notes
** The Bitmap Data Structure
这个数据结构用来表明在有限域中的一个密集集合，当集合中每个元素最多出现
一次且没有其他数据与这些元素相关。即使这些情况得不到满足（比如，当有多个相同
元素或其他附加数据），一个来自有限域的键能被在一个复杂数据表中用来做索
引。

#+begin_html
<!-- more -->
#+end_html

#+begin_src c++
#include <cstdio>
#define BITSPERINTEGER 32
#define SHIFT 5
#define MASK 0x1F
#define MAX_BITS 10000000

int array[1 + MAX_BITS / BITSPERINTEGER];

void set_bit(int i) {
  array[i >> SHIFT] |= (1 << (i & MASK));
}

void clr_bit(int i) {
  array[i >> SHIFT] &= ~(1 << (i & MASK));
}

int test_bit(int i) {
  return array[i >> SHIFT] & (1 << (i & MASK));
}

int main(int argc, char *argv[]) {
  int i;
  for (i = 0; i < MAX_BITS; ++i) {
    clr_bit(i);
  }
  while (scanf("%d", &i) != EOF) {
    set_bit(i);
  }
  for (i = 0; i < MAX_BITS; ++i) {
    if (test_bit(i)) {
      printf("%d\n", i);
    }
  }
  return 0;
}
#+end_src
* Problems
** 1
如果内存足够大，如何用库实现排序算法。

#+begin_src c++
#include <cstdlib>
#include <cstdio>

int comp(const void *a, const void *b) {
  return (*reinterpret_cast<const int *>(a) -
          *reinterpret_cast<const int *>(b));
}

int main(int argc, char *argv[]) {
  int n = 0;
  int array[10000];
  while (scanf("%d", &array[n]) != EOF) {
    ++n;
  }
  qsort(array, n, sizeof(int), comp);
  for (int i = 0; i < n; ++i) {
      printf("%d\n", array[i]);
  }
  return 0;
}
#+end_src
** 2
如何使用bit操作来实现bit数组？

#+begin_src c++
#define BITSPERINTEGER 32
#define SHIFT 5
#define MASK 0x1F
#define MAX_BITS 10000000

int array[1 + MAX_BITS / BITSPERINTEGER];

void set_bit(int i) {
  array[i >> SHIFT] |= (1 << (i & MASK));
}

void clr_bit(int i) {
  array[i >> SHIFT] &= ~(1 << (i & MASK));
}

int test_bit(int i) {
  return array[i >> SHIFT] & (1 << (i & MASK));
}
#+end_src
** 4
如何在0到n-1间随机生成k个唯一的随机整数？
#+begin_src c++
#include <cstdlib>
#include <utility>
#include <ctime>

unsigned int seed = time(NULL);
int randint(int m, int n) {
  return m + rand_r(&seed) / (RAND_MAX / (n + 1 - m) + 1);
}

void generate_unique_random(const int n, const int k, int *out) {
  int num[n];
  int i;
  for(i = 0; i < n; ++i) {
    num[i] = i;
  }
  for(i = 0; i < k; ++i) {
    int p = randint(i, n - 1);
    std::swap(num[i], num[p]);
    out[i] = num[i];
  }
}
#+end_src

类似于洗牌问题或不知道n时，选取随机数：
[[http://wiki.dreamrunner.org/public_html/Algorithms/Theory%20of%20Algorithms/Fisher%E2%80%93Yates%20shuffle.html][Fisher–Yates shuffle]]
** 5

使用两次传递算法，第一次排序0-4,999,999，第二次排序
5,000,000-9,999,999.
** 6
每个整数最多出现10次，用4bit就可以表示，多需要空间n×4bit就来存储每个
数的个数就可以。
** 9
One problem with trading more space to use less time is that
initializing the space can itself take a great deal of time. Show how
to circumvent this problem by designing a technique to initialize an
entry of a vector to zero the first time it is accessed. Your scheme
should use constant time for initialization and for each vector
access, and use extra space proportional to the size of the vector.

data[0...n-1]是这个未初始化的数组，每个元素都是个随机数，额外添加两个
数组from[0..n-1]和to[0...n]，和一个 =top= 变量。如果元素 =data[i]= 已
经被访问过，那么 =from[i] < top= 且 ~to[from[i]] = i~ 。访问过的如下图：

#+begin_html
{% img /images/blog/2014/programmingpearls/column1_9.jpg  'column1_9' %}
#+end_html
代码如下：
#+begin_src c++
if (from[i] < top && to[from[i]] = i) {
  //has been accessed
} else {
  from[i] = top;
  to[top] = i;
  data[i] = 0;
  top++;
}
#+end_src
** 10
open hashing with collision resolution by sequential search.
** 11
扫描图纸，通过信鸽载送35nm的影片到测试站，在那里图纸得到重新放大和打印。
** 12
用铅笔。


