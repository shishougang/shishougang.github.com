---
layout: post
title: "浅谈设计模式"
date: 2014-05-03
comments: true
categories: [Design Pattern]
tags: [Design Pattern, C++]
---
<p>
读完GOF的<a href="http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612/ref=sr_1_1?ie=UTF8&qid=1394635442&sr=8-1&keywords=Design+Patterns">Design Patterns: Elements of Reusable Object-Oriented
Software</a>和图文并茂的<a href="http://www.amazon.com/First-Design-Patterns-Elisabeth-Freeman/dp/0596007124/ref=sr_1_2?ie=UTF8&qid=1394635442&sr=8-2&keywords=Design+Patterns">Head First Design Patterns</a>，一时并不是那么快消化和理解，所以试着用自己的语言总结一下。
</p>

<p>
《Design Patterns》在Introduction章中"如何选一种模式设计"一节中给出了一张表格，5个创建模式（Abstract Factory; Builder; Factory Method;
Prototype; Singleton)，7个结构模式(Adapter; Bridge; Compose;
Decorator; Facade; Flyweight; Proxy)和11个行为模式（Chain of
Responsibility; Command; Interpreter; Iterator; Mediator; Memento;
Observer; State; Strategy; Template Method; Visitor)。
</p>

<!-- more -->

<p>
设计模式提倡：
</p>
<ol class="org-ol">
<li>面向接口编程而不是实现；
</li>
<li>使用组合优于继承;
</li>
<li>程序模块低耦合,高内聚
</li>
<li>独立出变化部分，适应后期变化
</li>
</ol>

<p>
设计模式并不是只局限OO中，主要理解设计模式的思想，但它也引入了一定的复杂度，不要烂用设计模式，宗旨是写简单而清晰的代码。
</p>

<p>
The best way to learn to write simple code is to write simple code!
Patterns, like all forms of compexity, should be avoided until they
are absolutely necessary. That's the first thing beginners need to
learn. Not the last thing.<sup><a id="fnr.1" name="fnr.1" class="footref" href="#fn.1">1</a></sup>
</p>

<p>
所有例子的代码在<a href="https://github.com/shishougang/DesignPattern-CPP">这里</a>。
</p>

<ul class="org-ul">
<li><a href="http://dreamrunner.org/blog/2014/05/03/%E6%B5%85%E8%B0%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F1/">浅谈设计模式一: 策略模式(Strategy)</a>
</li>
<li><a href="http://dreamrunner.org/blog/2014/05/03/%E6%B5%85%E8%B0%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F2/">浅谈设计模式二: 观察者模式(Observer)</a>
</li>
<li><a href="http://dreamrunner.org/blog/2014/05/03/%E6%B5%85%E8%B0%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F3/">浅谈设计模式三: 装饰器模式(Decorator)</a>
</li>
<li><a href="http://dreamrunner.org/blog/2014/05/03/%E6%B5%85%E8%B0%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F4/">浅谈设计模式四: 工厂模式(Factory Method)</a>
</li>
<li><a href="http://dreamrunner.org/blog/2014/05/03/%E6%B5%85%E8%B0%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F5/">浅谈设计模式五: 抽象工厂模式(Abstract Factory)</a>
</li>
<li><a href="http://dreamrunner.org/blog/2014/05/03/%E6%B5%85%E8%B0%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F6/">浅谈设计模式六: 单例模式(Singleton)</a>
</li>
<li><a href="http://dreamrunner.org/blog/2014/05/03/%E6%B5%85%E8%B0%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F7/">浅谈设计模式七: 命令模式(Command)</a>
</li>
<li><a href="http://dreamrunner.org/blog/2014/05/03/%E6%B5%85%E8%B0%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F8/">浅谈设计模式八: 适配器模式(Adapter)</a>
</li>
<li><a href="http://dreamrunner.org/blog/2014/05/03/%E6%B5%85%E8%B0%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F9/">浅谈设计模式九: 外观模式(Facade)</a>
</li>
<li><a href="http://dreamrunner.org/blog/2014/05/04/%E6%B5%85%E8%B0%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F10/">浅谈设计模式十: 模板方法模式(Template Method)</a>
</li>
<li><a href="http://dreamrunner.org/blog/2014/05/04/%E6%B5%85%E8%B0%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F11/">浅谈设计模式十一: 迭代器模式(Iterator)</a>
</li>
<li><a href="http://dreamrunner.org/blog/2014/05/04/%E6%B5%85%E8%B0%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F12/">浅谈设计模式十二: 组合模式(Composite)</a>
</li>
<li><a href="http://dreamrunner.org/blog/2014/05/04/%E6%B5%85%E8%B0%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F13/">浅谈设计模式十三：状态模式(State)</a>
</li>
<li><a href="http://dreamrunner.org/blog/2014/05/04/%E6%B5%85%E8%B0%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F14/">浅谈设计模式十四: 代理模式(Proxy)</a>
</li>
<li><a href="http://dreamrunner.org/blog/2014/05/04/%E6%B5%85%E8%B0%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F15/">浅谈设计模式十五: 生成器模式(Builder)</a>
</li>
<li><a href="http://dreamrunner.org/blog/2014/05/04/%E6%B5%85%E8%B0%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F16/">浅谈设计模式十六: 原型模式(Prototype)</a>
</li>
<li><a href="http://dreamrunner.org/blog/2014/05/04/%E6%B5%85%E8%B0%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F17/">浅谈设计模式十七: 桥接模式(Bridge)</a>
</li>
<li><a href="http://dreamrunner.org/blog/2014/05/04/%E6%B5%85%E8%B0%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F18/">浅谈设计模式十八: 享元模式(Flyweight)</a>
</li>
<li><a href="http://dreamrunner.org/blog/2014/05/04/%E6%B5%85%E8%B0%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F19/">浅谈设计模式十九: 责任链模式(Chain of Responsibility)</a>
</li>
<li><a href="http://dreamrunner.org/blog/2014/05/04/%E6%B5%85%E8%B0%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F20/">浅谈设计模式二十: 解释器模式(Interpreter)</a>
</li>
<li><a href="http://dreamrunner.org/blog/2014/05/04/%E6%B5%85%E8%B0%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F21/">浅谈设计模式二十一: 中介者模式(Mediator)</a>
</li>
<li><a href="http://dreamrunner.org/blog/2014/05/04/%E6%B5%85%E8%B0%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F22/">浅谈设计模式二十二: 备忘录模式(Memento)</a>
</li>
<li><a href="http://dreamrunner.org/blog/2014/05/04/%E6%B5%85%E8%B0%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F23/">浅谈设计模式二十三: 访问者模式(Visitor)</a>
</li>
<li><a href="http://dreamrunner.org/blog/2014/05/05/%E6%B5%85%E8%B0%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E9%99%84%E5%BD%95%E4%B8%80/">浅谈设计模式附录一: 标识</a>
</li>
<li><a href="http://dreamrunner.org/blog/2014/05/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%9F%BA%E6%9C%AC%E5%8E%9F%E5%88%99/">设计模式基本原则</a>
</li>
</ul>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" name="fn.1" class="footnum" href="#fnr.1">1</a></sup> <p class="footpara">
<a href="http://blog.codinghorror.com/head-first-design-patterns/">http://blog.codinghorror.com/head-first-design-patterns/</a>
</p></div>


</div>
</div>
