---
layout: post
title: "浅谈设计模式十六: 原型模式(Prototype)"
date: 2014-05-04
comments: true
categories: [Design Pattern]
tags: [Design Pattern, C++, Prototype]
---

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 实例</h2>
<div class="outline-text-2" id="text-1">
<p>
有一个系统中有很多系统配置和用户简况：
</p>
<ol class="org-ol">
<li>初始读取配置或用户简况需要花一些时间（比如用一些系统调用或读取数据库等），但并非实时数据，只需初始化读一编;
</li>
<li>因为众多系统配置和用户简况需要初始化，每次手动初始化比较繁琐，希望能一个类其中管理并快速创建实例
</li>
</ol>

<p>
那么如何能不每次手动初始化对象，并能克隆初始化的数据到新的实例呢？
</p>

<!-- more -->
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 原型模式(Prototype)</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1"><span class="section-number-3">2.1</span> 目的</h3>
<div class="outline-text-3" id="text-2-1">
<p>
使用一个原型的实例来创建一些特定的对象，然后当创建这些新的对象时通过拷贝这个原型。
</p>
</div>
</div>

<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2"><span class="section-number-3">2.2</span> 实现</h3>
<div class="outline-text-3" id="text-2-2">
<p>
使用原型模式：
</p>
<ol class="org-ol">
<li>第一次花一段时间初始化系统配置和用户简况的数据，存入相应的变量内;
</li>
<li>原型管理类其中管理需要克隆的类，直接克隆初始化好的实例的数据变量值，不再需要去或系统调用或读取来初始化数据。
</li>
<li>客户直接使用原型管理类获取实例，不再需要手动实例化它们。
</li>
</ol>
<p>
<a href="https://github.com/shishougang/DesignPattern-CPP/tree/master/src/prototype">代码实例在这里</a>。
</p>
</div>

<div id="outline-container-sec-2-2-1" class="outline-4">
<h4 id="sec-2-2-1"><span class="section-number-4">2.2.1</span> 定义原型抽象接口</h4>
<div class="outline-text-4" id="text-2-2-1">
<p>
为克隆声明一个接口。
</p>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00ffff;">class</span> <span style="color: #98fb98;">Prototype</span> {
 <span style="color: #00ffff;">public</span>:
  <span style="color: #00ffff;">virtual</span> ~<span style="color: #87cefa;">Prototype</span>() {}
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">Prototype</span>* <span style="color: #87cefa;">Clone</span>() = 0;
};
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-2-2-2" class="outline-4">
<h4 id="sec-2-2-2"><span class="section-number-4">2.2.2</span> 系统配置类继承原型基类</h4>
<div class="outline-text-4" id="text-2-2-2">
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00ffff;">class</span> <span style="color: #98fb98;">Configuration</span> : <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">Prototype</span> {
 <span style="color: #00ffff;">public</span>:
  <span style="color: #00ffff;">virtual</span> ~<span style="color: #87cefa;">Configuration</span>();
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">GetFileInformation</span>();
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">Prototype</span>* <span style="color: #87cefa;">Clone</span>();
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">ShowInformation</span>();
 <span style="color: #00ffff;">private</span>:
  <span style="color: #98fb98;">string</span> <span style="color: #eedd82;">file_information_</span>;
};
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2-2-3" class="outline-4">
<h4 id="sec-2-2-3"><span class="section-number-4">2.2.3</span> 用户简况类继承原型基类</h4>
<div class="outline-text-4" id="text-2-2-3">
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #00ffff;">class</span> <span style="color: #98fb98;">UserProfile</span> : <span style="color: #00ffff;">public</span> <span style="color: #98fb98;">Prototype</span> {
 <span style="color: #00ffff;">public</span>:
  <span style="color: #00ffff;">virtual</span> ~<span style="color: #87cefa;">UserProfile</span>();
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">GetDatabaseInformation</span>();
  <span style="color: #00ffff;">virtual</span> <span style="color: #98fb98;">Prototype</span>* <span style="color: #87cefa;">Clone</span>();
  <span style="color: #98fb98;">void</span> <span style="color: #87cefa;">ShowInformation</span>();
 <span style="color: #00ffff;">private</span>:
  <span style="color: #98fb98;">string</span> <span style="color: #eedd82;">database_information_</span>;
};
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2-2-4" class="outline-4">
<h4 id="sec-2-2-4"><span class="section-number-4">2.2.4</span> 原型管理类管理原型克隆</h4>
<div class="outline-text-4" id="text-2-2-4">
<p>
<code>AddPrototype</code> 添加原型实例， <code>GetPrototype</code> 克隆原型实例返回新的实例。
</p>
<div class="org-src-container">

<pre class="src src-c++"><span style="color: #98fb98;">void</span> <span style="color: #7fffd4;">PrototypeManager</span>::<span style="color: #87cefa;">AddPrototype</span>(<span style="color: #98fb98;">Prototype</span> *<span style="color: #eedd82;">p</span>, <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">index</span>) {
  (*prototype_map_)[index] = p;
}


<span style="color: #98fb98;">Prototype</span>* <span style="color: #7fffd4;">PrototypeManager</span>::<span style="color: #87cefa;">GetPrototype</span>(<span style="color: #98fb98;">int</span> <span style="color: #eedd82;">index</span>) {
  <span style="color: #00ffff;">return</span> prototype_map_-&gt;at(index)-&gt;Clone();
}
</pre>
</div>
</div>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 总结</h2>
<div class="outline-text-2" id="text-3">
</div><div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> 原型模式(Prototype)结构</h3>
<div class="outline-text-3" id="text-3-1">
{% img /images/blog/2014/prototype/prototype_structure.jpeg %}
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> 组成</h3>
<div class="outline-text-3" id="text-3-2">
<ul class="org-ul">
<li>抽象原型类（Prototype）为克隆声明一个接口。
</li>
<li>具体原型类（ConcretePrototype）实现自我克隆的操作。
</li>
<li>客户类（Client）通过要求原型类克隆自己来创建新的对象。
</li>
</ul>
</div>
</div>
<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3"><span class="section-number-3">3.3</span> 应用场景</h3>
<div class="outline-text-3" id="text-3-3">
<p>
使用原型模式当一个系统需要独立与它的产品如何创建，组成和表示，而且
</p>
<ul class="org-ul">
<li>当这些类在运行时被指定初始化，比如，通过动态加载，或
</li>
<li>为了避免创建一个与产品类层次相平行的工厂类层次时，或
</li>
<li>当一个类的实例能有许多不同状态组合中之一时，创建相应数目的原型并克隆它们比手动实例化它们更方便些。
</li>
</ul>
</div>
</div>
<div id="outline-container-sec-3-4" class="outline-3">
<h3 id="sec-3-4"><span class="section-number-3">3.4</span> 缺点</h3>
<div class="outline-text-3" id="text-3-4">
<p>
原型模式的主要缺点是每个原型类的子类必须实现 <code>Clone</code> 操作，这可能很困难。例如，新增 <code>Clone</code> 操作是困难的当所考虑的类已经存在。实现 <code>Clone</code>
操作可以很困难当内部包含不支持拷贝或有循环引用的对象时。
</p>
</div>
</div>
</div>
